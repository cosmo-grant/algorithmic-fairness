(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    328206,       6754]
NotebookOptionsPosition[    320947,       6510]
NotebookOutlinePosition[    321326,       6526]
CellTagsIndexPosition[    321283,       6523]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[StyleBox["Algorithmic Fairness", "Title"]], "Text",
 CellChangeTimes->{{3.8117697786437845`*^9, 3.811769793815795*^9}}],

Cell[CellGroupData[{

Cell["0. Loading PrSAT", "Section",
 CellChangeTimes->{{3.811981690161304*^9, 3.8119816942312164`*^9}}],

Cell[BoxData[
 RowBox[{"<<", "PrSAT`"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["1. About", "Section",
 CellChangeTimes->{{3.770297293203838*^9, 3.7702973207381067`*^9}, {
  3.8117881122433567`*^9, 3.8117881126160173`*^9}, {3.811978134645443*^9, 
  3.8119781347310324`*^9}}],

Cell["\<\
This notebook explains how to use PrSAT, a decision procedure for the \
probability calculus written by Branden Fitelson, to resolve questions about \
algorithmic fairness.

Background on PrSAT: http://fitelson.org/PrSAT/
        
The rest of this section is a short introduction to algorithmic fairness. For \
a gentler introduction, see \
https://phenomenalworld.org/analysis/impossible-to-be-fair. For a more \
advanced introduction, see https://arxiv.org/abs/1703.09207.\
\>", "Text",
 CellChangeTimes->{{3.7702969746000566`*^9, 3.7702970323282566`*^9}, {
   3.7702973273111444`*^9, 3.7702976109279785`*^9}, 3.7702980430497265`*^9, {
   3.8117755506451573`*^9, 3.8117755571673703`*^9}, {3.811779901419157*^9, 
   3.8117799840800476`*^9}, {3.811780030024313*^9, 3.8117802411619687`*^9}, {
   3.811786624351821*^9, 3.811786648103053*^9}, {3.811786806713176*^9, 
   3.8117871208625045`*^9}, {3.8117871679054894`*^9, 3.811787220120037*^9}, {
   3.8117872527524867`*^9, 3.811787253485053*^9}, {3.8117872909772997`*^9, 
   3.8117874531026025`*^9}, {3.8117874977779617`*^9, 3.811787608197446*^9}, {
   3.811787647267544*^9, 3.8117876477510834`*^9}, {3.811787681666316*^9, 
   3.8117877308981295`*^9}, {3.811787887778041*^9, 3.8117879001108456`*^9}, {
   3.8117879366103773`*^9, 3.81178797840843*^9}, {3.811788502255224*^9, 
   3.811788509054699*^9}, {3.811789475717236*^9, 3.811789492677462*^9}, {
   3.811789754377659*^9, 3.8117897741448507`*^9}, {3.8117899953415165`*^9, 
   3.811790037738383*^9}, {3.8117900748560963`*^9, 3.8117903168250866`*^9}, {
   3.811790365822483*^9, 3.8117904007224607`*^9}, {3.811790721911425*^9, 
   3.8117907273421507`*^9}, {3.8117907626534986`*^9, 3.811790768389087*^9}, {
   3.8117908047282543`*^9, 3.811790907749082*^9}, {3.8117911070483108`*^9, 
   3.811791165060788*^9}, {3.8117912910981083`*^9, 3.8117912940856323`*^9}, {
   3.811791327185254*^9, 3.8117914682091336`*^9}, {3.8117915126682615`*^9, 
   3.8117915727083244`*^9}, {3.811791611812154*^9, 3.811791709338907*^9}, {
   3.8117917592204423`*^9, 3.811791766794334*^9}, {3.8117921142241087`*^9, 
   3.8117921432451153`*^9}, {3.8117921746509314`*^9, 3.811792193080225*^9}, {
   3.8117922283207207`*^9, 3.811792245624806*^9}, {3.811792277244051*^9, 
   3.811792314413397*^9}, {3.8117924226125145`*^9, 3.8117924327019296`*^9}, {
   3.8117925252883797`*^9, 3.8117925541050177`*^9}, {3.811792585377082*^9, 
   3.811792750799038*^9}, {3.811792781231882*^9, 3.8117927835083427`*^9}, {
   3.8117929062169313`*^9, 3.8117929123819103`*^9}, {3.8117929500580916`*^9, 
   3.811792951961252*^9}, {3.8117930081995945`*^9, 3.811793073935227*^9}, {
   3.8117931983034563`*^9, 3.8117932491005588`*^9}, {3.8117932829606733`*^9, 
   3.811793284123272*^9}, {3.8117933490272827`*^9, 3.811793422112568*^9}, {
   3.8117934642888827`*^9, 3.811793486793522*^9}, {3.811793526368718*^9, 
   3.811793602180721*^9}, {3.811793656889226*^9, 3.8117937201121597`*^9}, {
   3.8117938835866547`*^9, 3.8117940043510523`*^9}, {3.8117940433995967`*^9, 
   3.8117940741891346`*^9}, {3.811794137495407*^9, 3.811794256341254*^9}, {
   3.8117943098560605`*^9, 3.8117943693011103`*^9}, {3.81179453187945*^9, 
   3.8117945443576775`*^9}, {3.8117945891768436`*^9, 3.811794600406845*^9}, {
   3.8117946592008133`*^9, 3.811794746211773*^9}, {3.8117949405960417`*^9, 
   3.811795060384002*^9}, {3.811795109906989*^9, 3.8117951446454916`*^9}, {
   3.8117951813489804`*^9, 3.8117952182954845`*^9}, {3.8117953055374274`*^9, 
   3.8117955118726473`*^9}, {3.811795559374426*^9, 3.811795573284442*^9}, {
   3.8117956354096375`*^9, 3.8117957326362424`*^9}, {3.811795762938361*^9, 
   3.8117958355071497`*^9}, {3.811795898349784*^9, 3.811795927603964*^9}, {
   3.8117960224773035`*^9, 3.811796093026932*^9}, {3.8117961253808875`*^9, 
   3.811796125893256*^9}, {3.8117961731076255`*^9, 3.8117964440744476`*^9}, {
   3.8117964762604218`*^9, 3.811796496107684*^9}, {3.8117965473053384`*^9, 
   3.8117965679221005`*^9}, {3.8117966859755416`*^9, 3.811796863578333*^9}, {
   3.811796982421858*^9, 3.8117970195949244`*^9}, {3.8117971283101444`*^9, 
   3.811797200187111*^9}, {3.8117972794858212`*^9, 3.8117973230912356`*^9}, {
   3.811797426631032*^9, 3.8117974294927425`*^9}, {3.811797515435218*^9, 
   3.8117975192627983`*^9}, {3.8117975537826633`*^9, 3.811797555953166*^9}, {
   3.8117976166189585`*^9, 3.8117976230733786`*^9}, {3.811797663674426*^9, 
   3.8117977551617174`*^9}, 3.8117977992311773`*^9, {3.8117978854168167`*^9, 
   3.81179788756177*^9}, {3.811980261331546*^9, 3.811980286360956*^9}, 
   3.8440226308944874`*^9}],

Cell[CellGroupData[{

Cell["1.1 Crate-and-boxes problems", "Subsection",
 CellChangeTimes->{{3.811797807651245*^9, 3.8117978370561285`*^9}, {
  3.8119607753050537`*^9, 3.8119607756000166`*^9}, {3.81197813745243*^9, 
  3.811978137571395*^9}}],

Cell[TextData[{
 "Imagine a crate full of locked boxes. Written on the outside of each box is \
a number (the box\[CloseCurlyQuote]s ",
 StyleBox["label",
  FontSlant->"Italic"],
 "). Written on the inside of each box is either + or - (the box\
\[CloseCurlyQuote]s ",
 StyleBox["class",
  FontSlant->"Italic"],
 ") and either 0 or 1 (the box\[CloseCurlyQuote]s ",
 StyleBox["group",
  FontSlant->"Italic"],
 "). You draw a box from the crate at random, read its label, and on that \
basis predict its class. That is a ",
 StyleBox["crate-and-boxes problem.",
  FontSlant->"Italic"],
 "\n\nTo specify a particular crate-and-boxes problem, we specify which boxes \
the crate contains. For example:\n\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
BoPBYDAY8fw/pWfjzg==
     "], {{0, 100}, {769, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{769, 100},
   PlotRange->{{0, 769}, {0, 100}}]], "Input"],
 "\n\nThese tables tell us that there are 5 boxes labeled 1 belonging to \
class + and group 0; there are 7 boxes labeled 5 belonging to class - and \
group 1; and so on.\n\nProblems with the structure of crate-and-boxes \
problems are common. Take industrial quality control: You predict whether a \
product is defective (class) on the basis of some measurements of it \
(features), where some products are produced in the night-shift and some in \
the day-shift (group). Or a job application: You predict whether an applicant \
will do well at the company (class) on the basis of their performance on a \
test (features), where some applicants are men and some are women (group). Or \
medical diagnosis: You predict whether a patient has a disease (class) on the \
basis of their symptoms (features), where some patients are over and some \
under fifty (group). And so on. All can be modeled by crate-and-boxes \
problems."
}], "Text",
 CellChangeTimes->{{3.811797812025676*^9, 3.811797812271204*^9}, {
  3.8117978898123446`*^9, 3.811797927258539*^9}, {3.811801019151961*^9, 
  3.8118010198077874`*^9}, {3.8118613254759507`*^9, 3.811861325985442*^9}, {
  3.8119450059662027`*^9, 3.8119450059670496`*^9}, {3.8119803438188763`*^9, 
  3.8119803478827825`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.2 Strategies", "Subsection",
 CellChangeTimes->{{3.8117978527921877`*^9, 3.8117978542001195`*^9}, {
  3.811960778597308*^9, 3.8119607789427996`*^9}, {3.8119781401651955`*^9, 
  3.8119781402433887`*^9}}],

Cell[TextData[{
 "Given a particular crate-and-boxes problem, we can distinguish two kinds of \
strategies:",
 StyleBox["\n    - ",
  FontSlant->"Italic"],
 "a ",
 StyleBox["decision rule",
  FontSlant->"Italic"],
 " takes a label as input and returns + or - as output\n    - a ",
 StyleBox["risk assignment",
  FontSlant->"Italic"],
 " takes a label as input and returns a score in [0,1] as output\n\nHere\
\[CloseCurlyQuote]s an example of a decision rule for the crate-and-boxes \
problem above:\n\n\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
NrWWFZdUyy0Y6WalfZCfUX6VSeM+bd5qgDcOcPmJf4jbVXER3lsPxmlLW/75
2Q6OZx+S9VbNfR1EbRbzoqZpNTZ0xZphH0ie4uU+h1IfGVz31iLLU+T7j1ID
Pnn9n+O8YtlDBj9pl/iHrdQSDq3yOEvuuTgE3hzjH5SQJu3YLNcNodHRUacv
3smXmU6WW/yDT68yKXq904qjMdHRMefu5HO6youmqqQ15Pdd3bQtMOQ23uMw
NNjSeJ48pajYM8c96FwBQ6lVCnyhygrbNX+iVylDVpQxV4i4FHWShjz9+qWI
ExFrf/j8jS+XsPGPCitWsW9y/x5zD+DXZEXhyDVjOwxZX87o7jZq9QMbPHyJ
GidDFd1PjA45fnjVb2+82fdQLjlki/YfRdmDCydOxAS7/fvVD6afgPinBugi
hf/kbvLcEXIbN3RzXIrdKvuwNzdV18I2fvnW651+8JEyPMU/JMmqVK+FCy9W
I1WrFCp8ybi8xWHa/jgueYKozX6FQ/xDEi2O9/zrT9/wmNOnY6KiY06fP+Wx
bJbTrhuMwejHMsvTuLFHWRjiMulfb7ecsqOexj/X9851iUhjbBr/oK06+eDq
o5f0B9Xk0mUM7vFPyc3ofTvC9EmZTpZFLFUlqr5Ii8i5pWu8/XA1Yvv4h6ZV
OMkyt2E//OwcjY+oVRqKyTyxc57DTm38Yy5HS4v6qVl9Xu3mSOIfEt9R9yb8
77Mf3S/iBYxRNEYzmX6zm7cbdg4v1cjevtbiBzZ8eBJ1TapPLP/nG98cJGs6
2/L5V3nM/159f+pxiH9qgBSH/zxc6rLWL85o/4FnscI+bMnJuRoWFB65+cf/
dOy/FbfF8Bj/XJ/Z9X9uZ0oY3JMQ1yvnNzn8fiCBS54garNfMStqNk3p3bjT
0Vcfiy3/+u6toQWU7nHLM3C3PElAfSM04Mjp0HFdO47ywDFVPYx/bgQsdI1K
Z2wd/6huH3I9eqYg996FmFPx98vIG7VrKtfGPzGB3seyijMvnIy6lVlO3jDT
XiqWqlIX/5xfsc5nfzze46H9R0PizavuI59v1NrB8ywOOpiyXU5z1ofjyxbF
obbkXNRplZJCpxcy5ZtXuztlkcxJ8HVhaJvWv23DdxMUaY3KP7K48f/91+8+
CY5q12ArAHgSNQs7WCMnyLFx429tGf+gcoM+/eBYN4h/nkIb/2StcN2wP57X
+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
/w/Hk8zG
     "], {{0, 166}, {768, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{768, 166},
   PlotRange->{{0, 768}, {0, 166}}]], "Input"],
 "\n\n\nHere\[CloseCurlyQuote]s an example of a risk assignment:\n\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
KV5lHshSHZGdaG+fPuabUhV7Yk77HnMjW4M6ouSK/XfEQiF6zfe33nTYpYw5
QI6rmDyiQc9aTYLp1kVrbFzDIsJ9z5qvsTyfXqtm0D0rdSTJdFw8c+th19CI
MK9TVruNT6SKaJ6PO0LlTeZYi0XYgtkBrqZLTuSjd0KhWJ1BCZqNO8Kjossu
bB0tEAg6D17keOrcIeszyZVillvTajBnjQkBFf5m9eqImR5XbvV7j6fUUVXw
76+1HbUlAH9FSeMR59URnt+nuAewU1eGn9licySzFr0VKe4BqdKAqok6YhKp
DZuoZXVEMZatsjcAdaTg3yjN7E4V631ousVtbE6hSG2UboI6IoG5JjX4sMOV
Eild7ruzy6s/6U4d4RsJpSrMMPqrr0DwUvdJW05fOGZ52jOzBn/C4oL8UEf/
OjU2ujjJa5e5aRSuqkXEq1XMH9Vszhpp5ymKtlhler+8bmS+EtioI6YVki6O
unLwbBC6F0NtpnfoOS+qNaijZ4k7Y+QSyPJc9nPWqOrMa26XgtOYCSjSXJOJ
A8Zvvco4m9K4x2bOGiUu8HVyDs1ixgNLc4z/+NVgkzszCLzxCMAHdfQs8UFH
N1zV6BuazVkjJ1Ul7p404H/v/lcgeOu37ZfKmIcbNtdqtjoqszD4/Fl19J82
ozb40zxWR8+Se93krCvLex3U0YtPWdSlRScSWJ7cBHWEZ5xKi9yO21+LLkEP
W9nXtnd9tb9Tkkgmkzc2MvdZmjJnjVQTuXeWjOnz7pv/EQg6LLELEJMP1H+Z
H+roGWrCrI4fLWJ3rkbqiHFrKuz0pumWuPdWtcXVqyPS1FUVe9j8VFSxRC6R
BtvM6PjV3IeVSNE33p/xQqgjJmP5Ud4HjBDGRvv3o/9tX/T7kAkz8R4nRkYm
Jsbo9bh7eA1ztrLx6hqtd0Qx+jbSYeY7ncb7F1F1Y7UaQaP1jqQifE6U9bT3
3hntV0LRSupmbqsj8muKYgJssT2NjRkjbl08y6D/5O3o3f795JjdhftV/57e
CBq1HeEZmiVpTju3OnqFFWQ9tFj1x2dvvPzFBKPUKkoxrFMlzVZH1Q5/9f58
tDGOEgp1dG/8mx0NjO6RA7xTR4xVy5Pv2JoyTm2EnXrPyqlDx03csg/fBMaM
Uzs4B5bK6UbvAVBHLxTML6dSQ9xNmYjM+LTR2gV/9hm7mPFphVOf9ItTFiU1
VkfMJXMfXr/snU4OiIKNP391oAep/XSgjiim7UiS/8Bi746zQUmFibd3/jXk
A8HLPy4/XSTFxldrUY6rI9IvlR1xVFFVM2yYO2KswWpcVe83Yu4Bq6M3cpgh
Q89bSAN1RDoyxQmrhww3CchDaTVTHTHJ1UZ4uQQkVZAjccfmdvpmSSr5+out
jgoe37K1xBywsECve5dPGDZ1rglzxMoKv571etQcdUS+lupzdOVa6zjcxiNH
5R9/Zv5LbbtahOGElQ2dVa2OFHM3bp34Z9XBuEqKkuFkYxwXdBR86vCQabNr
LKDyQR0Vx985zFjP8sAB9L/dy+eN+3naXvQO2Zcx6NErYdpSR8zHopv2q2ea
+tTLmvSgQz926T73TDzNVJeqi7g56oiMynbf9lvHwduy5XWjsnNu/NT+4/lu
aTg1Ho7KZqxa8STkiLXCq9GL6fqZwydM3WWO/yb3wLHLwWWgjloDRB2lh3lZ
k4jMOPWWf6b0Hb+CMa/CoE63E7SkjhgpIs+wmjh1pYmN7UGbg/b2RkvHtHnl
s1mbzU9e9mcWvlETODVTRxSZKV58cvnSzaej6tN47G74+Xs/WPjn0yyGZfNB
HQlzIk/bEafG98CBbYtGjx+30aTub0tLh9O+ec1WRxTTnFMV4fDVR6MvJODT
VJe9anVEpJY0+9aaBTM2mh22P2htZ2e3bnK/dzsM2GBiddLvsaSx/L4Q6qhR
Ys/sd7nN8lw26ogpW+n5dQNf+3xWcC7uHkXfibSf9n8dR3nn4RZcZdJUpToi
g5lkVxb9+N7nf/nXJ2v517uvDPUpZAJKY6lyWx01TlzQkQ0eGn2DtToixZe/
b7HBusBKWi6pqRXWCHEJe1ktHm10F6egPXXEjMqWlviadHzrB7uYaqlMJmLa
ip5c2NStz+wHteg+EUmllCz2VPdPhzklMgsiKbk4l9VRo+R4GZ91ZflTNRqV
LUUmqbw/ocPHY+weSPGGDuqbedmoI5SOVFpmO+abDhMPVkrRRVRNKOC2OmqU
ssiLC4/rsGeNpkRFGTkZaWmpeEXAJz5GM94UfG8bkJCRUyRkMbdDQ3XELIgn
ejRpyBLnxyJaKhYKa6tr0TGp46QFu08xe8PxXB01SvUDq2NHCtmdy1odKVZX
iHac2/H1sd5YmTZLHSkSFVcXZaelpaenPUF3VMrhef3bdJ3kGZOcUVje6CJs
L446qhvEK5UwY73yA/Co7PK6rZOaPyqbKVtZXICT6em7ippPnrVl1I+jN3rU
0Kr6XtS0HTHfy/A/ZuF8r+5Q5rYx/Yatd8XuoUT38EEdIblO9isiw+qzb7ua
kVHZyL7qDErQcL0jWeh5w99X2mfVnUsVPzI13OHGLA4pU1fCGs/oD7fv9PbP
Z/MVl8LJl4Uv//23PTdyyKFAk4VDFp8sIZ8qSYPz6ojZdYVxajF26ioyKlvI
TLWouwe0MCpbQdK0Tp/9eTqFZd7Yz+g/9ef3naafVnsaH9SRIkor9rSTxPoc
mn4gkMy8UERp5b+6+TuJlF/Z9N5LI8gwIO33rCnajqqvG66ds/1KvbipTPHZ
uMHmfpa62TskU3xQRwqnxkPz8WuS1y4Ls6hy8rdUS6Oy0QMPfr22avhbgpG+
jN5pvjp6hpBdBp2+WVFAvv5iq6N66mb022/T7ox+UkuJSiOuHd+3z/yAyb6N
y+avMnfPE6tRJ2rHHeFvyyofuJ4wNjM1MTPeMH/BBstLOULGnErS5YM6qqd+
Rr/lcl3N6KeJccWFAeetNq7ZtMfCYt+efUYmDtfIEhksrsVqNUjmhxTG3Dlp
abx20g8Cwf8NnrvJ7NDpu6lV+Bag6ZLHfmbrNx08dfa4venGLUcSioSwkwhB
MaM/6twOB23O6CeOIy1/4nHYZu/Gae0EL7cdMH2vxcELwam0OrdSqY7IV8uD
L5y02LtuQNs3BO0HbNxrctgjpFx5hw4f1FE9pAiS/I/NttHtjH6KmcUtr0xz
PW69YHgPgeDdMUt2O18Nr6LUx03N56wxKdamX3Qw3bBli6G5jemOXcZWJ+8l
5NLsojQv1FEdihn9ad77rC3jtDyjn4wLpgJ2/fnhZ7PCWOgAtjP6mW2fqrIf
X7QwHPPVB4LXu87cYuoRltZo9/4Lq46K/C1WO1xSu7cRgf2obCYtcW7qkyfJ
yUmpTJxWlz6rOWv4RZSTlpKSkpyYrEhWRbo8VEe5AZf3zT2qo9UgFRdiXovS
EpOQeZOSs4pwrxbLsmXVdkTunqqSzCfJCYmJqWkpSQkJKelZpbWy+guJy/PT
s7Iz0zPLGu3JfhreqaOIk2sPOGRre70jSlqTn5GalJiQnJqakpiQ9CQtt6xW
bZZYtB1Jy3IznyQlJKY8SU1OTExKycgvU7ENCg/VUby37QRjPP5Bp2tlY2S1
eZmpCUnJaenYwtn55Wx2BG/aPmuMhSXZTxITU1JTEpLyq//1brXwUR2leG41
3h+Nq2otqiMF0tqyvOJyde34GI3ajmSiytwnifFJKalP8OZt+eWNh4sXUR0x
w/Gqk/yvBEcqGdv1LPXq6J9//kHljyodShnypy0ol8kUe4gqpaioCJU5eoN3
ZleerEyTZFE5o1e+qCMyQDc50ufCPXZPGAqIOkJfl+Ela1mAhwQ9lTbeYZ3V
NxUW2b59+6FDh9Ab5LbKzlTyEymSz4YHZeouLhQK+aKOyAK4maHuAXfLlQzD
foaG6ohS7dSNX1ENSB2pO0WzdEkOeaWOChLunPLDXZlsFgOqV0e3b9+m2Du1
Eluw+Q7xYuTRyK+pOh9XC4rlzwzql6n15DrIj+KLOqqbnOzl55srptnUY1QD
dcTGIv9+TR2kdkY1Naqv1Z/dWMaUpXn+/PkXRx01AVIrubq6kl+hXVDQGzly
pNaTRRgYGKD7hOa6OmoyVVVVpNWuxdi7d+/Jkydb8ooaNY7xClIm9+/fnz59
ui7S//XXX3WRLMotyjMNNn0OUrmg8gkLC2vJ6yKPRn7dkldEUQvFrpa8YmuB
1HTp6emo7tNF+qimRvW1dtN0d3dfuXIl/UKpI0ouYx1eiDry9PScPHnyw4cP
UXSK0B7+/v79+vVDb5BTaytN9HSJXgcMGJCTgwfx8kId4WcyzeqL2tra/v37
o4IKDw/XVsmrtsjChQu3bt2K3jx48EDXV0SEhIT8/PPPNH9qUsapWd7rpExQ
KY0YMQK9atepEX379tVugiSHJLc0P2yKm2vZ2lNRucyaNevo0aMoSmsxnCqD
eDHyaOTXEXU+rlNIpEJRC8UuXRb8i4QmTk1quuzsbFT3adci5HZCNTWqr7WY
JrpRjY2N161bR79Q6kgTiDpCxdKlSxckkP78888J2uO3335r27YteqPFZElS
HTt2JJ2kvFBHmiOVSpFBtVXmbCzSo0ePb7/9doJWba2MSZMm/fHHH3369KHZ
LTTKN4i6iI+P79SpEyorrVvkww8/1G6CKIconyi3KM80P9SRRpDKZf78+YMG
DZoyZYp2C1+ZRdAr8mjk1xNaxKkJKGqpn/TKS0hNh2o9VPdp1yIkKVRTo/pa
i2lOnToVKS4ybq1VqyMXF5f169frIn0dNQOOGzcOetZUUFVVpaM+TWWYmpqe
P3++Ja9I+negJn0eUiYhISGzZ8/WRfojRozQRbIotyjPNNj0Oep71mJiYlry
usijkV+35BVR1IKetUYhNV1aWhqq+3SRvi5qam9v7xUrVtCtXB25ubktWbIE
/QR0Z4qVIhKKG6h6uVgoUn4uQ15e3tChQ9Gb2tpaFacJRZIGqYpUJ1tdXY1e
UXzmw6jsJoNKaciQIbhshUI1RnraxCJmVKUUv5ew/A6xyNatW+3t7dGbmpoa
Ta7IwFxUpslFKysrycwpqEmfp35U9qRJk8TqnFok+bcAKYka7yMMGjRI7Tko
WPybIamaZEkOUW75MCq7CYjrRmXfunVLrNapsQ+JmEU9qWdM0iB8U6pNQrwY
eTTya3Gdj7NB2GA1UZn6KqLBF5kfhaIWH0ZlN4H6Udmo7mNvEbLcLiVVdQ6p
nVFNjeprVedJZVKxsLrqKaprG78VSZpOTk4cGJXNYkY/ESE1caGBQXcCb3gH
pJSpj2Cs91mTJIT4uV8+73Tjfrm6VHk1o7/JaDqjn65fr01UlhafwXLCI0Hj
1SCfvTBN1RQlRSeo3hvlGfgzo78JsJ3RT8paWvowMCDozu2b3sH57GKY2hn9
ZO+MtIeBV10unL4amCdscLnGEPNpRn8TEGsyo5/MFqcrM+KzGmxwSpw7J9bP
+1agr3dIAl7JT+mick2c0U+oir7j7XrxnLtfBFE5Gg2W48mctSZAaTijnyl4
ipaWPU5MKBQq/m4UFjP6ybo7VTWsc/sCzuhvAqzUEZ5UjDyp9O71S6fPe97y
97tsvXbYuPV+T1SsaY1hoY7wCqsPXOwsT7hcdDq5fu6fo6fseFQqpxufO4gB
dcSGJqgjjCjjyLLp42aexEKF9dpKzVFHZDrzfbtlg8dsZ8zJdqQqqCMVsFJH
FFM31uQGuJw66+Z7y9/n2Pa5BvP3PyIbQDd9NUgSSaUxXkcsjl5wcT69c8W0
4QYrArKEjLUbTxbUkWrYqyNSvrLSWONJQ2faBDCH5GSrrIo4jyXLNh29csPv
+qWda5Za+qfSytcT0FwdKbaI9Dlkf8T58rkzx9dN+23E3zYpVThPyuzeEFBH
qtFUHZEFeHI9t/cYOTu4jFbhfWrVEVlyTZxwZcqEMVNnzJg5E92J06fPnDV7
9uwVh33IFq6NpskHdUQ8KNv/5IIZuxMUNslb06tjt3G2pZSqRXjUqCNmIZeS
WPfdx28prloTMan7h18tO8+0XTQeAUAdsYG9OiIFKK/OvmK2Zt6KuT+07zBg
xiVcxCo3xmpI09URc2PJswLGffhGNwML/KAL6kgbsFsrG79GuRtNWH2ijBwS
ho/8/MPvN3upXVRJlTpinFqc7rvn0NVSxaH0VT991H6itWJPA96vld0EWKkj
puSpgoeWe9Yu+nt6lw86TrK+R5N5UdjNnmweNmim9QNybrG32S8/LA2rpvDH
jVlEU3WE9xCnqWz/sw6XghWxvshv+Hvvj97tLaOVXeQpQB2pRkN1xJwujNvQ
/52Xfpwfg9uO5E1WR3LmhHxfi+7v/+f1115/4/XXXnvt9bdef1UgaLfUOVLW
mMbmjzoi8if18hqB4K11rsl44UC56Pykrz5sNy0C6xiltz6Lfdbk3rvmrD0U
UCWTC0US9LfvdoNXXht9S/EA20iaoI7YoHnbEQpvyKzFZmO+/emvc/gm0LU6
wssUID2cdf2M49Lf+/b8zbiABnWkHdirozsWBgJBV9uQIuzTdPaaoZ+92sew
kFbjVyrUEVNL0qE2y5cau5RIKLEYj2p67Dj/P4K+55OVLnsH6kg1GvSsUTIx
kkPC2Cn9vzQwv4NPZvyxPNS6+yt97O9X4VUXkY1Kbo3r0GWVWyZzQiOpaaiO
KCkO8OVHFq4wPH6vVi4TS9DX5edX9xN8MTsSt0SrX/MS1JFqNFFHpOel8t6V
U1tmDXqz/5xIvEZCk9UR2bhN4udw5lbYv1vmilN9bU5dL5I33ijFH3VEms3k
pcnXrtyILahlas2C7d9/1Oan3fmUqhtfpToizXWyS3N6C17qezFNxhQyFeO4
oIPgs0OPGHM2Zk1QR2xogjoiDeMmo3r/OLUF1BFp7JdGXz935UHcpa0G3Ubs
ZSplUEdagP1OIjVZ0e6ufhmVzMjs2qjxPd/7bJ4zETEq0leujig5s1/I7e2j
BYJOVg/JJk/y7Gs7u770vqF3Hg3qqElooo5IL0jspB+6E3VEVq9OPLnsvZd+
cE5hnmbxcO3o+Z93HrPJGxujsT50DXehlTODfyssfv9EIBgZWEaO0YGWU15+
6RfXVGb/G3WODepINezVEcXYM+fuFWfvmGD7Oa/2mRHVzLYj/L2amKj4nCK8
QDcS1/KyWJtd9vfxMt+NJ/tiqiNmS4jGUHJzst9nrSGV0U4/dPnZ0CudVtZW
zqBu3BH+YmXaA/frdwtFuPEV/e2/a9xrgp89s+W0kg2l+KaOcBNL4wZVFW5e
cHVEhpUJs+8fc3Avk9Kuq3/pMmI/qCNlaHoPsFdHDcm4vr/HV6NOPq6kmzPu
iIz+zYu+etU/s1qGx7zQ9OPji/8r6HEsWukwRZ6pI419WiN1hN1P1FAd4dib
4bapg+BL+9AKigxZkCYs7/F+7/kn8VMoJXveJk3YhRb9K4q543EjrEKKKwWK
lrmsHyDoMPEe0xGgdugR39SRpjcBW3XEPHfKSuOPHXbKlsof2kx9qc/MZqqj
p3KBc1dz46DR6aAs/F0lVn0x1ZGmsFdHqNQlktqc5LhQn5NzRoxe7YjXtFcd
RVnPWaMVglccO7dvx14rLtUoT5pv6qhpvOjqCAvj8mvHDnklo0goP7N8cNeR
+wvwOGFQR1qAvTpCEVoiqkhLeux/wWbCiNG7vcn682qKlMUutAqYfra87SO7
dJxqW0gpHRnKM3WkMc1RR3IZbs6TZLv98m5fE+8iRa9L3s3BAkG3v+2YsWHa
UEfPZAJ37IT8+VGHsfv8JKTGhp615sFSHTEqVXL/4rHzd7LRn3fNJr/cZ2Zk
LTrcbHWEm41wpVAbeWbB7rPFKsZ5v5jqiKpJuHvT/aqnl9e1f/Hy8rzq7nU3
XtjYL2GtjhT7L2fFPgy5dyfA58zKKbNMrkSRT5o4KrsuYWZRfXzxm2Zz+03e
k1SuwpL8UUfkl9XEh/h7uF31amBR9N7Tw+1GcHS5hFZWAC+yOiI9sQX3Lp+6
GkeOXFoztNtok/J/P1QPT9QRYxVJatgtD4+n7gF0E1zzdL8aEFnBxMhnyoz1
jH4y8746KTosOPiu/2XbmX8tPXY7s/7CylCvjohTM04fcWrNd2NWh+WLGafm
95w18vvFpQ/v3HDz8HzGqZGb3w5NEtKN+HRz1FHdliXVV3fNn7jzCqM8pBGn
t3z65n++mefIOJ3W1BFjdjIMterSxj+Hz7HPqmXmzLFwav6oI+J12VF3PD08
rj3t1F6e7m4+DwprGpkYwUYdkXNq024dPhdIVtF4YP3XK9/OjidjY5qrjsgI
tYpj8+cZnohg7iyl9+GLqI5oaXlBTmZm1rNkZmYXlDcqUDTqWWtY7V1d8aPg
w0EX4nEzj7IHfpZtR0xPOR3lZj5x4YHH6jyDN+qIIC0vzEO/NCu7oTmzGYOW
ipXHyBdXHZGG3/x7RkYH76bk5GRlo38OC3/+ZPCmqOycoooaUEfPIa8qZu6B
rKfvAXQT5JVKGvv1GvWsNUig0mTIp290nHavlHSFKP0Km7Yj8sCTHnBk8uxd
QflqbMQXdUSQi0sKsjMa8enM/KKKRgNl89QRhf+hb4hz3Y9Z7LNyOHbsjKff
5fk9Px662oNZhrXZ444aXJ6J9FTIqS0zN9ila7LJD3/UEaGmtCDrOafGd0Fu
kVDaiO+xUEfkWeqJvaG5R2RmfjYKrTmeu8a/0nOCT0pOYUllIyKYgaU6IkNF
6ULvMV+PsQzCslrF4I4XUh1pDBt1RIYSBDksHz95W0iuUCaVSKXyNPcVLwve
/OtQNM3Memi0mNioI8YpJEm3jq/edQYvjoHqgsLM3CqlhckzddREmqSOUFkW
MerIWYT+0o06Io8bFTHXjHdtM7Wys7aysrExnfxd5zbdx+48YHMxJI1iZ1M+
qSONYaGOmDKWl55fP+PPZRaJVTI8y0hG39k0/CXBu9sCS9AZSnwaw2I1SDzy
NzP8wuptDg/zke/La4qyssuVLibHL3WkOZqpI2RbYQyjjoKo5xaOk0lQ9Jah
Om7Ue5+su4o7X2RamLNWf3GUlOixi8VWy3MZYjyVrTgjt6yS1c7vfFNHmqJe
HSka5UO37t5tdsDa0srq4EHrhaN6vNT5+zX7rJ09I0V047GVpToibYL5V7e1
/XDQhQxmYHCrU0eUMho/nYU6IoVebjmhk+B/k+7WlV+Y2TjBq12Mg/DfyipS
teqI5Ko8K/TEucDyuoNJZ+2vJhTTzzUtEninjpQaVNUPb+JqkHS11e/fD5zl
qlEGm7tWNk0fm/x1zz/tyHtoO2oEDe8BFuqIKWZ58rJOL7/x0+pkRaCVO03t
LXh5gEsG/luFOFazGiR5miqKOuPknVdXMea4HXd5kEo+fv4rfFNHmvq0Rmtl
MzyZPqDXHwcf1F0NL/Rqs2GFybUk8nHyxc09B66Lq6kbZvscTVBHJPOlsb5O
nsH1O6V5OV6487iEZhGoeaeONLwJ1KujxvDdO/zVn5cWNEjheViqIxIQ7ltN
FbQfe51JsfWpIw1h3XZEJ99y3rb/bHx2Vk5OVlqk59SvPh++xrlS3szVIKmq
eI/xXd95638fffpRu7btOrZr1/btL5aGVzIdr42lyTt11CQ0VkeUpLw4Lysz
fGmvtp8MMk7MzClQ0hX7PE1RR+gJFyGT1laU5qQ9Wv39++/0XhqalllSJQR1
1HxYr3ckj3Cz2W5/PT07MzsrO+n2kZ8+7TnD7La0WXPWsAFrc4IWfNf+jXfb
f9a5Q5u2HTu0a/d2+6k3M5Q9vPJOHWmKBupIWltQkJcZ7/Vz53e+WeGcmZVT
VFqJHbL64aQenQasv5STnfUk1HXptLUXo/DEe2XupvFqkDhL8sLQMz+3ff3t
9p983LFd2w4ftWv3vw9+3xRfTbGY0M8/daQhbNURCa1SmbC6PDcr7cD0boJO
I71iMwrKa5o57oioI48tPwve+vVmPn4P6ohBEdJK4v2Mtu6wMDdatXad+YVQ
shuXirte9XpHzMwY2YMTO34zMBg9auSwYcNHjBw1YsQIg50XCimlKYM6YoMG
6oiUoLgo4JLDnu1rJ/8xfvzkv9ftMj1xOVTNPjF1NK3tiDyyFsXeObxr/bSJ
48dPmrV2t5VffBG7a4I6UgXLcUeklDNCLu3cscvUZP/G1WuP+ZO2BTUGULHe
EVlrJf7KgQkGBmNGE6cePXLEiFGrHZKFSpMGdaQadmtlM0Vb9eTSCdtda5dN
Hj/+zylLduyxcLkdRxrwimP9HawsLPbvNjRxuJeBezlVTCTTcL0jYvbqG1br
DLDdRwxXmH3kP5ZX8QoRLPYSAXWkGvZtR+RMYVbECeudC9F9MH7a8i0ml4LT
aSWhle24I+arKdcdVmw6nK6YEATqqI7ni0JdNabJjH62gDpiQ1N71ppC83vW
mgCoIxWwH5XdiPewcCj2M/pZAupINZr3rKlHdeRs3oz+pgDqSDVN61ljgybr
HWmWJjfUkZub25IlS9BPqKqqEitHJBLW1NTU1tYwr0IVZxJyc3PR3Y7e1NbW
KjtHWFtT/Qw1tSLlaaLP0euIESNAHakAlRISD7h4herNRGwrFGK7KiyAzcvy
iwqLbN261c7ODr1BibD8opi5o2obXFQoUmH5p6isrCR1NNSkz1OvjiZNmiRW
69SM3RmfxgZgU/iDBg1SY1ZhrUZOTXKIcgvqqFHEderIz89PrMapRbW1Tzmy
sM6m2NfIZ7Xq7Uy8GHk08mtxnY+r5flgXsOimlB8l/lRKGqBOmqUenWE6j5W
FhGhO6H+NqgRKjc5qZ1RTY3qa7VmYsKFKl9umKaTkxMH1JGLi8vGjRt1kf7Y
sWN1kez48ePT05U2FQKouiGPGC2Gubn5xYsXW/KKpFkSatLnIWUSEhIyZ84c
XaQ/cuRIXSSLcovyTINNn4NULtOnT4+Li2vJ6yKPRn7dkldEUQvFrpa8YmuB
1HRpaWmo7tNF+rqoqX18fFasWEG3cnXk6+vbrVu3uXPnzpw582/tMXXq1DZt
2qA3s2bN0laaJKkOHToUFbEdo8JDpFLpp59+igpq9uzZ2ip51Rbp1atXv379
/taqrZWBqlF0o3799de0VjttOQNRFzExMZ06dSJlpd3y/+CDD7SbIMohyifK
LcozDeroOUjlggoK6dJ58+a1mFMjj0Z+/XeLODX5UShqtUzXfKuD1HSFhYWo
7tOuRUhSqKZG9bUW00Q36sCBA7ds2UK3cnWENN60adNu3bp18+ZNP+3h5uY2
ePBg9Aalr600SQ6HDRuWn4/HzYM6ahSRSISKCBUU0r3aKnnVFlm0aNHmzZvR
G29vb11fEXHjxo3Ro0fTUJM2BimT6Ojo3377rd5AWuSXX37RboIkhyi3KM80
2PQ5SOWydOlSW1tbFKW1GE6VQbwYeTTyaz8d3ELPQyIViloodum7vF9ESE2X
l5dHArsWLUJuJ1RTo/pai2miG3XPnj2GhoZ0q1VHhNaoMVpjnlsMKBygNd4D
rTHPLQZPCocnP7NptLrCaXUZbhQK75qifWjmSVAXyQJq0UXJK4OsY9aSV9R3
6bYOdFTyOkoWUE0Luxg49YuJjkpe62lyQxoBAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCqoJhFD/SdC0C3KJZEkcnA
2Byn4eo3YGpegCwuk4OpOQuyL/UU+s4Q98EuBT7FB573JvAv3gCm5jpgYADQ
EUWeJw/6ZuBdBeWglTgItqmsONn1sNmmtcsXLV7vHJzBHAZbcw3GpFRqsJuN
rf0Re/MNm61Ds6ppruwUADQCxYTsolCjLc5pzMawYGlOwXhuRXLI9bsx5UKR
qKaqJCPK68bd7AoZDSFch1DlWY9v3Lhuv2Fy505DL6XiVcqloI64BlMx1iYf
22d+LTKjqqoy2n3vFx9+b+SZSsNGotyCsTSSRhfsT/qXiGpqayr9jOd802fu
nQIJ6CNuQlEyGUVTtRfX/frmp6uTyCF9ZwrQIhQTotOv7RDU0b7bgB3nHoiR
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

     "], {{0, 185}, {778, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{778, 185},
   PlotRange->{{0, 778}, {0, 185}}]], "Input"],
 "\n\nGiven a crate-and-boxes problem and strategy, X is the output of the \
strategy: + or - for a decision rule, a score in [0,1] for a risk assignment."
}], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQHeCXkJOb9sbxvUAKmP7GeaIYRO9qrSsH0S+6KreC
aGPGrdtB9LWzHddA9FeL2XdBdA+vyOE8IL1A9P9REO0f6vsTRMd8Z/0Foru6
bA3ygbRJ1QFTEN2T09UFos9dNO4D0YdCS0t6gPTrqPxyEP3o48OVIPrKwYo1
IHpLBSP3ViDt89QFTIdXOgmB6Mv3DGRAtMruz8ogWs1lnx6ITvlkbwqiK76J
moHoU633U0D0UblDaSA6+vLURSD6yNv2JSA6SIandTuQznXzmAyi3XJ2LQPR
Zl/NV4PoTxd/XdoOdq/eVRB9wvv4lN1A+kK6wVQQDQBM76tR
  "]]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.3 Confusion tables", "Subsection",
 CellChangeTimes->{{3.811797874280838*^9, 3.811797875927597*^9}, {
  3.81196078283979*^9, 3.8119607831686735`*^9}, {3.811978143933098*^9, 
  3.811978144019292*^9}}],

Cell[TextData[{
 "A crate-and-boxes problem and a decision rule generate a set of ",
 StyleBox["+/- confusion tables",
  FontSlant->"Italic"],
 ":\n\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
EvD4efSpZaMHrXVD9ckaywQDAAC0GMgGHqJ4j+7vfTDJ8AYaq0NVG5VBy8SS
2hsPaUoiqh9xrRdSMqmkblTUUtlEg3nwgChpykXtz77W2eQQ8uThbQ+TqQuN
w/Lxqu8aKyc0aZ4XJVnobth42P3OvYcBDrv6ftFxy/l4RqPLTwAAAA1Bagkv
XJZpvfuT0Y1cVidlivQ24auogrD9s8aMGjVq9KiaaGujzyWeYQWMejTMNY1Q
kqpVvOv2zj9NC8whkyeiJvfovfocEhTN7awkTQvnt83uM8kkG7vQLxx6dhzn
+lLMgFACANCiIRJ211jnnbYD3RLwMP/KmTmbAYp4aREvOPiLErxDH5KIAKf9
+/cbGBjsr4qBIXI57hXMpRmlV7+aSChRoKVumyf3/ctehHRTRmUFDvn526kn
nzGaK5S42aHspUuPbzruuJ6LGhlk9MtTa7uO2BSNdLIFLEcBAABQJySPi7Sb
p9V+sFcaqhBVCCWFlaUo6uqhY/78KlsrVlxMiYX1I6o2aYAIZeyDy9bW1jY2
NtZVsbFFLq7Xw/maKpSkpp24RXvgbItQNraswuTdOPjDxz2PhaCyhmbqJE0a
4+8dnPl52+l3C2kULbrUYcnYP1Y54zozDHgFAKAlQ4RSEnf2l09/3HqNrSww
IqFYisC5X2nKeaszoYXouNqqdgw0vdYCjiY/ZOnvfQ0fFkuxj97rRrUboZeB
H2HzP4XXgaZQSwN1duGgTgP109nniOLycslvQzc6v+SWxNx8kMHAcB4AAFoy
NO5gEt00Xd1v+IZ7SaUVJ1LCg91POgcnFjLKblxDEzTrQaaSGkrT1SilaftX
Tt9xE02nKX7iOn7gXMfQ/IrJqhoITRY2fGa/qvsQI5QaGNmzU6s/6zDMJUkc
H2DjGI4qy7DeAAAALRn5qjy8+x6WW1avWbNq7zGLQ/tNrFy9/SNTipl6VZJu
kKaLRgM0VR8lG2M6/ekFXf2jdjbm27YaXriXxmj6cBf8HmWcBGvdXfvM7Ryd
3S5ecNf/b+OWvcaOXne4lMbWlQEAABqBvLojLM5KjE/JyExPzcgTVz6h+TTx
7iFlnPzs7Mx8QcuajS/j52Zl5+QVo/jIhAXZ2RxJcwcJAACgyaDpGt1MNV00
mCbdPaTSY6NqDoLSUCrHqpL2t5wkAgAAoAjq2GiqHJp6P8qW+RQrR6oFRg8A
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
331/vlNkxdmaF7EfpRlhjtY4FnVEzNLJN6WWpldaKiExqx1lj7tQX0hKTri4
f/Cg8RaBsRXu+fEh5isntOoywiFC8Eo639gz9kOYFrjozwWuMXhRg5Io3blz
ja8kM+WZeYMoXKPMdNuzZYvlPTwaXCbFkyki7Zd/qNVqu18G/oGStaC8W4eS
itFnhL3tiSM3ROyRRELc37xBX349J/LIsrUm/ikMGaSH52t5LR2spdXbORGX
W5UeNao+QFQ1ElKiKk3YqN3lt03e0qoni4JN22p9s8k9Dn2pkhmSYWH5vg7H
9u/fb2BgsL8GhujjyKWwXKamUJK0Inw2od8vS93iGxvkRtQoRSmejjY+0UU4
+Gj0q8eG37W+n/Wg7tWAiFDGBbgfwBGrGS/iZnvucWk9IcCP6qXLqRNG1yWM
8jMZRF6ord2ZJ2j0Po1yNWnqjpHtW/XXz6szYrgvLeWBuRGORR0RO3DiXAIX
xwDMuQ5wYqYzwv2O7Fg9acFqPQMDXd09Fh434uNfBj8JSSbtarXVv2RSSf3U
HCJO0ldJ7DXDPQbHT9qb6u1xCHguqmlQdVOfUBKtFaR7ndgxbsTA9t910PnH
LLoYzdZkNSY92Gne2P7t23zdfeDULaaukTl1toVQDUWsniEBTPnItyhHe2vT
W0qbHkLMOPeZ+Z6VIwf/0vqb7kv2eGVJSU1dFOp9ZOyvP7Vp3WawzkJ9R/9s
Qe0dymisQQOoZAUGQD0hVUVhzKWF48esNb/wPCE5IyMjPT3tWfDVoxvn953w
l+sL1HWixGl5tJifm5uVFn62xzefjdTzSc/IKuCWKX73hoVSJi7KTY995rtu
rM5fe/yEuOIsk1JiftGto/Pf1dLSMbiSml0gUNk6yKob9UpLSnMzkiPvnpre
d4yuh7yVjL29oCTbfl5fLa2PNniEZuSVlEnBgFVIxXA3NIsBo7oadXkax/OV
ZFWcFEGBGiVScJFISo4qrJxmq3pE4NCBcuZP1woxlnCr40cN/ZU8j5KNg0Qs
kqAbyivJxEdZ+QvD843BVAAFIWNzmNL0qycN/1m15eCRowcMDzr6hZdKxfm5
mYX8uobwNb6QTO5S/NLtpIX+5tWzpk+fPW/9fmNzn5AkxVewqU8oiZMw56qj
4ZxpUyZOmrJss00UXqSOJeep1/p/586YOW32rGW7T3hE5ghrv4mSCslKFkr5
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
AAAAAAAAAABA/fl/1t0OJw==
     "], {{0, 178}, {611, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{611, 178},
   PlotRange->{{0, 611}, {0, 178}}]]],
 "\n\n\nThe ",
 StyleBox["+/- ",
  FontSlant->"Italic"],
 "confusion tables record various probabilities of interest. For example: ",
 StyleBox["a ",
  FontSlant->"Italic"],
 "is the ",
 StyleBox["true positive probability",
  FontSlant->"Italic"],
 " (the probability that the box\[CloseCurlyQuote]s class is + and you \
predict +); ",
 StyleBox["b_0 ",
  FontSlant->"Italic"],
 "is the ",
 StyleBox["false negative probability in group 0 ",
  FontSlant->"Italic"],
 "(the probability that the box\[CloseCurlyQuote]s class is + and you predict \
-, given that the box\[CloseCurlyQuote]s group is 0). Various other \
probabilities of interest are derived from them. For example, ",
 StyleBox["a_1",
  FontSlant->"Italic"],
 " / ",
 StyleBox["(a_1",
  FontSlant->"Italic"],
 " + ",
 StyleBox["b_1",
  FontSlant->"Italic"],
 ") is the ",
 StyleBox["true positive rate for group 1",
  FontSlant->"Italic"],
 " (the probability that you predict +, given that the box\[CloseCurlyQuote]s \
class is + and group is 1). Wikipedia has a good list: \
https://en.wikipedia.org/wiki/Evaluation_of_binary_classifiers.\n\nA \
crate-and-boxes problem and a risk assignment generate a set of ",
 StyleBox["score confusion tables:",
  FontSlant->"Italic"],
 "\n\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
CkFWblUwvywvIyY67PLCzqyfZzwKiM9n82vatCR0mJ8WF8IQGtIYMenFNS8l
fu5J3z9j6PTjT/GTCRoMn2R68Ns/5j7HQyIkamgR9SYIMFe7aeWNXEll3vO/
+7/+8ncKcFkaeQJCr5zCzMhGZUKER6VXNtLws7wM107s9ymL9XEXOatYZJ2S
CeIR2luH7NHjvKvQ74NIiOb+ikIeq6uauaHhUtzgFZ2+6DFHCZmSTVxLipeV
+KZJ+cJS8tn1fkX+5Jhe3jbw189YrI+mHHiIAsPCRJWNa1VeJgkFfIpOPzZn
7KLzfjQWu4VikvorCXlyXU03AuVUqbdp1Eefz3iGxtU01VVR/LLkiCblC4nO
K68b1BDXSkGI8u4FXf6PxWL9ulPPH4eZgq6fU32F5oLQFopLRyjookptcb9V
d1pJrdTafwDJIcKdforlkd8+7qsZXIEeH8hVpni5qYmxoU8X/s76ePKxkIS0
cr6oVq+AflyZGtN0w4pIK2zAad1KhhYlQvpAkGl1+4qxD3KsFQeo92R9uuK2
Ly5Ew78lghWnxzd9w8SmFNQJHVa9F/o9OD+1589o5a5Zp95UUNXCae+bK6eJ
+miJGVpEQFGeneZVfY9EtNBLhG5/1sdyV1yxedKgwiGhw9L4N433UkjhRefi
0Fq90CGjEIIub5376+eMfF3+MQxF3sKEZ/tW7LRLZAuYzij/2dRek665FdN0
y4dRkacAKspe87rhc3RGUczWPt92GncymRIPoGhEPppflhvdZPWFRiSXN7I4
RGmYze6/R3zJyPfV+Ht+yLzKD7E9c8UILddFJx+aP3XNjQBaEoZWg0qt6lPt
Px0PMhZekHl2Qd9ea7WxK0uEbUtyayRu7dlp7BZTLH6Niq4OHWqg0OES+QYc
lkvqhQ6r6opvd1Bu8HoNdtXoCNcbG3vPuZRHNeupq7mGFgmo0cJ4VwMVE3d8
GzCPBHwHxSmsnydZxvDwnNYGflsVOjRAocMlDXhiiXN97d7aoUNidxYluLgF
5OL2zElxXDr0jzUPYpj3PI6A0bTuKmv+2qMvMUOLIjVHpXo9UDZ0zBURAYWu
F/9mfT/KMKSiYQHfhg63L2oqdLjqxotaW0kS+ZKDfX3DyFMP99WdzT/33h1S
veo81jKiVNsZ/WdphBS3+AlaPIOIl/3q1m1dfzRLHW2LUuCh2vmzr5feeI1D
mQ1lIA4dhl3f1FjokNTp/rqhQ/ShLMzbPSgNW5hUvt7mEb8rqFWtriTKT37j
8uDcosXH/fKwUm+BbNUIePya2fN4NVQhJeDBIFQpQGIgVJbb7D5d5TWQvwUN
266+WdIsRvzfr7uMY/FXa1RydejwwEaiGOrfNzh0uKGR0CEeDO9xrf/XM0yj
eBT1fn1ycwwtSrxtULGT6W0dl1jxl7mpp2b++tGwQ4n8xjwGtUOHDSq8BkOH
+LUkKcjRJ5Y8sWS+vNq//+i7kegTX8BczzzlLdPl7knM0EICotOUeT66c+95
JEW6D0HOtYXdWAN3vmE3LGB16PDMzmUNazxx6HC/bUyN0KH4tSzU/dUbPKGJ
6SJvbpj2p9x99IEEFbFQqVanB43e6VdU1bA+XDzxrLTsQPPrOvbpPLEGDbi5
4qOvBt7yKkb6vKHLWBU6tGk8dIgqdtkGlZqhQ3FJKzI8XL1TyfyF/KBdE/6Y
oeJFE+UmYqdEBRmf37lspw5ZnUwSGo8iy0VVfRJya0ok5Mn0Hi3vhFg7ZdGP
5ceP3aHpXFIlOr8g2lJpb8/OPTYbRuNalsCoOJIXJ8VOYf4mqxi8JmpJxNHF
Ky+/JNrp3ZX5Ph6tylcGV7f8q5/Dx5oOn5wdptuLxZp27gXOSVI9GVkfTOh4
dvFn3RQCK0hB45U27zKJRLOOBTha8eqGgiQNLQTP76Hq5t2aady3Agrizf5i
scYctiYbG0kkJ7ECK/VZ/ttPcpfdSWLGs+srT5mgAbJUlY5gJ9zctOHoPT8B
Tb9nT1IvQ/ynINJh36rDdinImBOKAwMpB3p8+Xnf7RH4Iktq1R6ijdmhun98
3vu4A36SowUu148oarlV3fv89Kgg95dPVc8eumgVUaOMH5QdvjYl4VarJ048
ZB5KEmOsTk+YKG8QWIC/UWJ6SmHi9GOhpS3MCmgAcv0TrC+MHT335svo6vTc
OJ+bO+Z+/edU3TA21ciDWEtyLHS/0vOTCSax791lvdPQEhdUmGZ8/MBhTW/8
1CUUIO8PHXJ302esrxVfZOLvSUrhEb9g3rmZ/bstVCcPI5UxDge3nAooFlXN
NyhU3TpDgoYWJvvR2cP7b7gQjUAEjDH+5yvW//ZZJ5GSSSQbIkCJn3q/z3pe
ds3FaUJH9QM7dQLIcDDyhYp4l30LN+u+wgEECcw9FIXaaWzaqhZLhiaQE2Y9
Hcti/bXVkFhDkqpAokzDtXd8/t0s+0zSs+fd27VT41WG+BuC4phgb6dnxkeP
njR9jdxcLVhiS7zPVZTZ+WkT5fSCyZCTCptLKybIHQvKx0+X5W+OLZ65aLeh
eEWADqvxcEeT8drg2jH5NRv2nbx44eSxC5qPAiMTIkI9A1Krrfh6PxOiaYlN
0MDSH/giFgU/u3bq7B097WunL+g/fSNsdoT7HYaW+AGmwv+xqvy86f1+7z5w
7F6n6ALyNXaCi+LG2X/+1qlrnynbTt14EYFM9QbbD9mbrElqaWF8Eioj8KnS
BSUDi0emehoqN+4+D8igxGaIkPnnobJm4G7dCqGohU8++IJyQuxvr5CbOeCP
7n2Hb3salkME5KZ6nd02r99vnTr3nrBZ8bpdcE4jAlLvqre6q/6hD/zcl7rK
l9V1H1mY3VVTva1vn87mV5tZlCDPRk1J89Fr5rbhc7gfrHSIIIUR9ge3rBgz
uHenzlOvPQzkkLJwMh+p7hneq8uvXfsuWHfotn0IGfDW4FmaIV/dIIigKMZA
+dpNHWOLR0Y3lZV1HvuX8ZDLXsityC8U76iYbnX0x77ybjlUo7Hn5siIVWhl
tMWU7v13GJPVMulY8yN/dJ+mF0J2ZKgwPTi76/C9YZKf0gQgKHLDhjy/rrhr
/tpdZy5cOHHy1C0zp7j4aK8AvyQ8d7ZB/887b5w6rYLUdV6ow82rpzYsntC9
c8+pa/edvaLjI55H36y6bcrQIhlUpJrfOjJn8shuv/4xe+2tqCI0JINpN6ke
BqtnDuvW+ecBo5ccVjOJyMFrpTaU6ftqcnwO7msb/cvXbj20stDTUFPRMA1O
wstAY+eaCHu0FtwNYAyGFg2IFfsSM200T/w9dczvnX6fulwpNJ9HBMz0Ndkw
b9TvnX/pO1zugLJhcGYju5cwluF7KTyshni54UYql1R1H1qaGdxQuWFk51su
evtcyS+M0Dx1xSYwB0WU+R/uhcCXhv/G8f6axXMH9fq9x8D1Vv7p4shDVuDV
fxb379ypU88x6w5dtvTPaFg6fJHeIR9fUE8+ujDaXe3iVW2zRw+N7quo3rJ2
TyDhJ25FaUEph3zT8tCcLvMv5VBVXpIPkxH3ljFmx3t0naJDnh5pjtWRud1G
7Q0hyxLwYvZPGTBqk15ZYxJ2FKpveQGfh1dI5kttGZRqDSYUoCXGayW9E37z
PFqM3uCJ4zI1QkwUWvyZvMOaQyoS4hV2q+SiqeoyhmhuHnbIvDq1hdQQUNSg
gAIpCYiXSRYIxLct0nZIxHIXfS0zxyimMInP7Gxs/fAwlJZoVyGfxyPqWfDW
lYq6OfGm54KGbHiJIKpRf1iEsPvbBi+8SCKmZc4Xv+o0wRLNKqWksKkA0HpU
1R7FEys8gfSqk0LGhliloi5f8H5tpxmhQ3RrkLgMVWP+HXpgJLcJ2mJBSsu2
U+SGEZeMoqvUG19z79/yRjgIK4FblQiIlVvjAkrljhTVVuhkBn1Zgumt+85v
Chlr00fT0DUyixz74EwYS5DH45E4y9vBUFifkw/S0udv5SOdCfOfo79j+vQT
DuSo89kFn4/ZlyJokaEF1KS+T0l6a8PWnX3Q7B8209BqE+pcLEpshdD8ssyA
l7ZnVoz4ceJmEzuP+Jxyup2VvJnULnP1SL6ix8eXdvmh88gpUyeOHdZr8Px7
HsjVLL0FC6VG3fojw14K3zhcPnFS46Htcyv9Qzt3nNT2rmxpbLSZxZF2Bv9x
GlBu7XMx7PdcR6v1oOprBDLKICPG3VZv+egeA9Zfeer0OpuMM2931/WdNCwf
VRJ9bt7gzl37jJs8ZeyYQd2nHvDL5TfbPdmeqC8fXsEr7oWW4smrptZPbR7c
2LDhX10XtEyrxNdlBdoz7dnQagyRoDI/IzUhLiY6Ji4pNbu0soPtDcrNiI0M
Dg0O8PPz9/N/HRFbhOWTgYppNrzirITE1PTkuJgU2d+3FpA12q2h1Rh8dkl2
alJsNKPwEtIy8zmy98zVFBSvJD4iNDj4tb8fQ0BQYmZLN01pf5RkpySmpKUk
xCTl1Zt+DjQO1VHg8dCcHcbQiouLo4jPof3TcasD04GbG6LOHA0cmmlHSE1n
yDBtXScShs1mM4YWhcbnC9u6LM2ig1dIR29wdWKEonbW6qSmNoC6LFq0KCMj
493fAwAAkH1mzpzZ1kUAAKBhiPlXUFAQHR0dExMTLfug7cSio6dOnfry5Uvm
TVRUVCtmHvUmMjIiMjopOSmuI1zLuryJiklKTc/IzMrOSo9nPrV1eSTOm6jY
lPR0RsLM9JSYqDdtXRwJEBsbC494NSFXIy0tra1rRpKEhISMGTOGefPmTSs3
WkbjRURGxaUkJ3REhcd0HvGMwstACi85urWvbSsQFRWTwMiXnpGVkZIQ1SE0
empqKt3+hgwJ8B435ubmCxcuXLp06cJmI1eT6pTm/15qLFiwgHnt1KnTjBkz
FuJStVrWcgsXr1ijsElBbvCAYVPnyOHcWy1zaYMkWSY/d1CP337+4evPvu08
af6ypYvaSZ1LBEaQRSsWz+jTpdNvv3z/fdd+c5YsX9S67UcarFq1SiiEbV/f
Qq7G6dOnmYuzePHi5l/JegqvHbWN+fPn//TTTwtbv0iLl65et37t4ml9+4+e
jz63lwvScvCVXLxk/qQenX7+6ZvPv+wyYIH8ikVyHUelYwGXLpkzpvNPv3T6
6dtf+41dsly+rQvVIsjtfOLEierbHJA28vLyxcXFrZ9vSoiXmere8dvVs1s/
b+lTGv7a3c07JND70a1Tu1VfdrAh+wxpAV72Dt6RYf56Fw4qP41p6+IAQHOZ
M2dOW2TLDnd5qqqo8PcFp7bIXeqkurl6BIYE+bionD56ySq+rYsjcahAhxfO
PmERQY6XDh2xjO14Y/bbF4z5967VzMTwuBwu7l+5xdlxsbGJyclJSZmV2Hjk
V5aUVeLvNPNczYbH43F5zT0rm81mXufNmxcVFUV+K+niNAjKhVtZkpkY66a+
6beZu31LWjFzacPjVjKClL5eL7fhni9etrfcR75Pv31WsczBSo7sC0kErAxf
N3XusUdoa6FixxOdfl/tWYAOctu6dC2kDRVLu0UgeNf6lFVwORzyQFGcnRId
F5+UlJycXkDWb6usKKmQStt/L4WHKC0tnTp1Kiott5VaK1ZtvMqyguSoiLu7
pvTcoVOOsu8gCo+pdeaFE2UyZfbBQLyufbmP+qAekx/EMJ0Lj8OVfSm5WGvH
mY8estI6CTVnp/N/d5uqnI8qlSPTGo8E6WQacdyTm+lgpHX9wrEtu/ecvHzt
/Mnzd629E2O8rx8+74m2B6Hadqouv+2WdyDL23J91YYu3B+Ad0RoZ4HiD0W8
HFam8Xmlh69ScUtOPTqi98J7aCe4Fq3q3E4QC1jq/fSxRwxjSXI91f+ZKH81
AT/hdYw6BN4f8QwmXlbYg7u3Lp7Yt2H/kYsXL108p2TuE5fganr6vE4Gv12s
09hGyzuIb5ugu5sGS3jvsLYGy0HlBV4/ctM7nY00XrLt9O5DrgWjpQyktRJy
a0JqqiLV3sIW7XQnKNDYIb/ohB2nXTTn/zSkZjgJTgfXL1Y4cs8rvjowxw21
05g2+Pc+awwrJV1N5FTlBRmpOc01XNrU0EKzXAudr/wl17EMrXqU+qoPH7vx
JVoeRgZX4WsEUlklycEOJlfl5bY9jmbTHajrAN4TsSZLcrm3Sn75IVWb+JLq
Izl2Nw9079ZnheprGq/TLclc0QsvJyM9vxTpsWY2v7YytMhCJp6qayS9SWu7
w1djx9DFVzO4ZO/6ti6NhMByUKmh7iYq++TWXIrGm+rIvhEpy+DuVJDwbNWo
gctUXpJohEDAr9r0IGnP8EHrdUOYmpNsK8Qno7yf3Dv6IJJu3t6jrWBoMfqF
ecbBOka83QzZ+0CEB+AVuVyVcUMLSSVAm4BUCyjEG/9RAh6XkZCf4rxnwx5N
LzQMTSY1a7V8VdsFCWvsXcErzk5NSgx4eG7BTrU42Enwvwpx1qQ9Ux45YOyl
F8kkTYAijngbm1Trib+P0QirQFpRok+WOOyRp6F+28AfhQeaqU6lbGgxNmeV
QhDVUghkBblXNxRk29CixBr9rXxkNyJKxOPykCnirrNiw2mPHCQsJYOGiFg8
prLwSmvVHRahNDcjOTHh4bWdqy/ac+mO9Ogsa1C41bHjDk3/vdscVTRGR1S1
8xHagolpeiUmK/eb+qGNJevth9yixcWIoeVuqb5LL4xuN4ZWgzD5VHm0kKHl
X05VbbDTQSCVJSyN1Lp9zyG8jKbY6Sl4vFbHkFFECcsyXr0KzCjHbSz3xYiu
vfY/QTOFYcvC/xzIBqe5KTaTOv80/7wnSuDxqjYCRHe1qCxcZd5hH7T5bd2R
Ei1bTZEYWrnK15U1vRvd0b4+UjW0GisBVe3RwoZWJdZ3HehWoYixXRzvqHTT
NLyI5pcV5eTiVdBlTMiGi8tUVXlGlKtPFHYJ0EUvLnzXdYplCtoVGzReW0CR
PemC7237jNVLNbAUWcU17mZ8a5V4mbmmlkh+2C0xtDysbu/TD6fbgaFFzpUZ
+lzztoF7eC6vIMbWzNhQW98xMpeuCiKUuV3tN/+fIDK8R8YaLClvZeSLR3f0
H77O4pYmeJsZG+noPgrJQLcjPy/sxsmzWvaBGYnRDhbqlx9G07K1ZSHZWTIr
3NJY1+hRAJcu97czNzLQM3niU0nTnAD14UPmWSajShTEmQ/qPuyiJ96TUXbk
AyQB2bStTHfN8I9/W+pZip8mayseETvV2cQb21mS7XXFhtYNVVUtn3ZgaBF9
ICgLcze/fetRbCG38I2n2QNjA72HIXlIzQrxhsbeN1b3220g3qtektlLHyyg
qDLnlYXOTTOnHA4vztvBxNhA98GLLBxHy450OH7kmn1gQlpUgIam+iMf9Ggp
QxqPVGBhtJuOpu4z7xQhO/WZ+QMjHT1bn0QmPURjfd9Zikn4m4mPjv705xIn
NM+jjUdZ/0dhnlqYV17qgek/fjTiWDpF1/fTiEQNLFpBtvouyUmPY4iPa4zU
vPL6tSoSop3KGThcNAHH2fzmLu0g5l0lm0PSmxiOKEVDCz/g8DLcbxg7ej44
O2TUxIO3n0TGxUR7m2ycudE6gUtTJa9f2Goorhkwev6ZexbeYRnY1ywzrZZ0
MDmeD40cXcxPbhnVf/4NW8+4mJjAR1emLbuWWFZoenBet+79Ro4e/tfAgf1H
yj+MRcpISlvGSx4Ke2ZFaSYmD1862W6fPWTynhse/lEx0cHXV644YuBHcUs8
TNUvq2lbmumcPnLwqmkAl5Kl6gMkAoXntFCp9sN//XTATivcE9dp4ninmwZ/
LOLmpCY2quwQibmlPHyO2ifE8/gYXcdGrxnXla5reGQiBYg1II/Hb/ouk5Kh
Rdp+YsBjDZtXNhdW9py68q6lR1xsjI/++eXLzrzh01RZittj4xPrpg+cs+2e
6bPIDGx7ys4tQ+zIYKv7Vj4eSvOnTpq318wtLDYm2uzS7kVHbNgV0YdnDPy9
11+jRg0dNKDfmGUnQ9HjpuzYISQIWBh4y+DpK+ubk8aM3HTVPCQmNibcfvfM
VXqBBbySWLPbSqpaDywM1PbuP2XimU7LVPV1JEjnK0ixn/kta/QZe2xnNXwv
19YcpDVWOKgfnT9/vtyihQvm10UOJ+2/70U2bm+idqPcjBVtcptZYOkZWrjZ
UrHWWvYZFYUOZ3oNXuki3kA45d8BXRep+KPdRNHcWAGjiHncpqzBdgkxqcvs
bz1MLOW4XVQYMON0Jrl4uc+HdRt03i1XwBdw+Uj5c7k8vkDG7kfSkiujXE2f
veKww9cOHrjbIoEc8lSc9ce4E2THJh4jG/OfD+vd/UchfulU65OdP/1275MU
Rq/VNXKoOn/JB9y8OIlq+9Yi5bZQrq6+W7AArSs6X+GOM4pHi5rsrXW0dczf
Z9EmaRla6H+5u6FmEI/2Ovl3z8VKYi2cbjn5h77XfEpQTBUpPKEILZchqDdu
pJ1D7Kwko6tPKumSKzPHzFF8QgQoeHbhx54LnHJFeBkQHofR6jyBjOzX/RbS
JNNfGlm+ya4Muj+47yyTeOyno8uUJ/ccf8AOvRUJsb7j8Il0slWBHQhSWRVh
uiNZrI33g9Gd9LbBkYk5vIjXIdGp2NZv4Y1GEROc4216fePGjZu2bN6I+Xva
2P4TFzFvNmzYuHkT83frjadRjWUnTY8Wkjg/JZtDV5rsmj9+iy6fDJot9pz7
029zL76q30plq9livcpOzS6iBClH5k5ZjUxHVMfs1/e6dP7jqGNOvR/IlHwk
LFqYX1BUmeN2Y3D/Ze7FpMmx9daN/vqvY+n1RoG2uXy1x/TU/9TW5euAUELc
5YRrbPqV1V0jqLz2uFMKvy/2dAvNZ+PbpaW5kfUjMk2uHGT02ubNmzYghbdq
1KhR4+evxspvE1KC249ZRxTSjUcSpThGi6rMTs6lREn/jBu5WQct58IohFKf
m7+x+l5yL5BwXm0CrzA5u4LOejat/8xb3sWkUwvV2fRRr5kOmW1dthaCG0tR
ek6FQOB8ad3QBZcLiMLjRW36s+vQHY/rPkC0vT5pSsV1bIVHDC0q+8WsH39c
ezcIPYlV3ctoyhbSOuEad7Vf5wrqTFfAb4VFWclRTZKUXVrz4pFfZcUGOTE4
Ozs6Mn8c1c7uXXxEm3n38oWjMzrgEpJcWP3tOkh3MDw5G//N1rFjNmqEEPde
qZfqtz/8ed4TubdSvaxUr90yMLynpGmVUNFQnLV9Q0pLJVlO7TFUyacE9zJ0
8O11P/4092UmI0yWtbbKDV2D+6o3zJzi3v5A1nh2Vr7vLJUCbDnTnDdrhv/W
/+BjNDohL0z/+nUdQ101VY1nUaiNteG9XSdn8VDsqiHZVEPfAVrO/7d3HnBR
JWuid/ft3nf3vZ03785eJ5p1zGlERR1RQEUwjgkdA4qOKKCIiKKCgg7gKBiQ
jGREkoCKoJIkiSA55xybDJ3TOdtV1aCAojNL05y2/r8Z6a4+cM7Xp+qr79QX
CsVBND03m/AfM+zSeoQCYZ+hJeAD3cIsfGTpGt4GF+IH/TK7oaJ0SIVX0tj1
bnU2FCTEKE5LhAov6jnQb0HHtI7p2zwEui8yCmi82FflbTAh7AP3W3KGForH
5ZX5Lp68xjENmp0k+fr2rjETN7+kEYSA2dlKK0r0vez4kkNSsjuiL6wuwGDK
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
DAaDwWAwGAwGg8FgMBgMBoPBYDCY/vw3ZlnOYA==
     "], {{0, 187}, {803, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{803, 187},
   PlotRange->{{0, 803}, {0, 187}}]], "Input"],
 "\n\nAgain, the score confusion tables record various probabilities of \
interest. For example, ",
 StyleBox["p^1",
  FontSlant->"Italic"],
 " is the probability that the box\[CloseCurlyQuote]s class is + and you \
assign score ",
 StyleBox["s_1",
  FontSlant->"Italic"],
 "; ",
 StyleBox["q_0^2 ",
  FontSlant->"Italic"],
 "is the probability that the box\[CloseCurlyQuote]s class is - and you \
assign score ",
 StyleBox["s_2",
  FontSlant->"Italic"],
 ", given that the box\[CloseCurlyQuote]s group is 0. And again, various \
other probabilities of interest are derived from them. For example, ",
 StyleBox["p_1^3 / (p_1^3 + q_1^3)",
  FontSlant->"Italic"],
 " is the ",
 StyleBox["predictive value of score s_3 for group 1",
  FontSlant->"Italic"],
 " (the probability that the box\[CloseCurlyQuote]s class is +, given that \
you assign score ",
 StyleBox["s_3 ",
  FontSlant->"Italic"],
 "and its group is 1)."
}], "Text",
 CellChangeTimes->{
  3.8117979496364326`*^9, {3.8117979894130154`*^9, 3.811798138216529*^9}, {
   3.811798285572801*^9, 3.8117983387801547`*^9}, 3.8117984960028296`*^9, {
   3.8117990046118345`*^9, 3.8117992103547926`*^9}, {3.811799260396699*^9, 
   3.811799561284848*^9}, {3.8117996088354645`*^9, 3.8117996374209557`*^9}, {
   3.8118022544963956`*^9, 3.8118022551448565`*^9}, {3.811802680546833*^9, 
   3.811802859376848*^9}, {3.8118031398475266`*^9, 3.811803141082651*^9}, {
   3.8118033313625417`*^9, 3.8118033359362054`*^9}, {3.8118616243705826`*^9, 
   3.811861658423026*^9}, {3.8118617180313587`*^9, 3.8118617966471543`*^9}, 
   3.8118627092842884`*^9, {3.811944283512582*^9, 3.8119442842751665`*^9}, {
   3.811946142335726*^9, 3.8119461698441725`*^9}, {3.8119464748163443`*^9, 
   3.811946734350206*^9}, {3.811946820335621*^9, 3.8119468215158195`*^9}, {
   3.8119490990407743`*^9, 3.8119491544204063`*^9}, {3.81194972621049*^9, 
   3.8119497355314703`*^9}, {3.811950570085636*^9, 3.8119505877179413`*^9}, {
   3.8119508659345007`*^9, 3.8119508740174637`*^9}, {3.811950991583102*^9, 
   3.8119514539810314`*^9}, {3.8119547773259945`*^9, 
   3.8119547859322653`*^9}, {3.8119579863343487`*^9, 3.811958024096367*^9}, {
   3.811958196949139*^9, 3.8119582372498055`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
1.4 From confusion tables to crate-and-boxes problems and strategies\
\>", "Subsection",
 CellChangeTimes->{{3.8117997160148134`*^9, 3.811799721542615*^9}, {
  3.81186271435462*^9, 3.8118627275631266`*^9}, {3.811863004124615*^9, 
  3.8118630340134544`*^9}, {3.811946337285428*^9, 3.8119463608786116`*^9}, {
  3.811946801229117*^9, 3.8119468018429513`*^9}, {3.8119492146068783`*^9, 
  3.8119492187253113`*^9}, {3.811960787318055*^9, 3.811960787656747*^9}, {
  3.8119781476452894`*^9, 3.8119781477239094`*^9}}],

Cell[TextData[{
 "Given a set of +/- confusion tables, can we recover a crate-and-boxes \
problem and decision rule which generate them? Yes, easily.\n\nFirst, \
\[OpenCurlyDoubleQuote]denormalize\[CloseCurlyDoubleQuote]. That is, choose \
positive whole numbers ",
 StyleBox["N_0",
  FontSlant->"Italic"],
 ", ",
 StyleBox["N_1, ",
  FontSlant->"Italic"],
 "multiply the confusion table for group 0 by ",
 StyleBox["N_0",
  FontSlant->"Italic"],
 ", and multiply the confusion table for group 1 by ",
 StyleBox["N_1",
  FontSlant->"Italic"],
 ":\n\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
IEGCBAkSJKYd/g+SJuwd
     "], {{0, 74}, {590, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{590, 74},
   PlotRange->{{0, 590}, {0, 74}}]], "Input"],
 "\n\n\n",
 StyleBox["N_0 ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["N_1 ",
  FontSlant->"Italic"],
 "should be chosen such that ",
 StyleBox["N_0 / N_1 = (a_1 - a) / (a - a_0) ",
  FontSlant->"Italic"],
 "and all entries in the table above are whole numbers.\n\nSecond, re-arrange \
the tables like this:\n\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
wEELELc2SHXKxDU2ObiGVXZm+vg9xumAR8GAq7oosG1QEyEYpukNIo0mIy1s
emxp7RHXSKEik6Sz/x8j5lm/5FHMNC2lx7W4Skjx2hqr87NjHqpf98yDhOHy
u/vLrq2ZuUTJHS8ayTeWnDhLOpNDdjRV52VFG6vf8MrnB+7/3VLDQwzRW2Cl
BdlpaGhoamqoq6uDg9N7lq6XvgAO1NThSQ2N+wHJlV3BX4UINUN4ud7bQcsN
DvMTHPBvZubBKSPHb7Vua4pRMQtoRLyoT3Q4tPt2Nsy/dkdVRZm74SgruVEa
e0Z8/2cSE83tI2vu7ly5TskfGcRNNDgvo+aOHGEX3t3xp34sHJLutbtOBDFE
vTVtidaqnrFcgTSmmEv+Q2yOa2ZlmJ+Z9fNWlCDVVPzCy/rOknGzt15+gsxB
2kbWqK6ePv2ABRfPRawK3zhtwa0ncFCAJDjlL8KMNE7P++ZXrSjUzBm+Yojd
QTZHuphiBqppwDW727eIi8uo8BkI/mgZhb9sovrWOmHFEOVpdaTR3UCgYHgs
mAhR3fS3j1dHlVa4uph7ZDExT0uD1SXkLWHeUA3mFw8oOGTj+CFXtk3deKMB
VxQZ8dv+M2qD2vPqpPtbTlqgLpN60wsHzjjmIpN6zykRxBA/THOWua1hTCdN
avwXfPbZKpWI1lKfS7bxFK5jEB35z/31Lh+cOWbpoxyYPn+CRmXgmp9m3olt
RhzkRd3Z9s+Re5+3c0oS/XUv/jlzzDL7l1yKFkMBsBi+CLbX0tLS1tbW0gR/
teT3LtsgcwkcaMCT4K9+YMrbiyGMy23IeXzdII+LZgcgKsapb/t0/PK7eoZu
UclI9Ag/tf2/KwfiONVe6pvXnk4HSfIKZBeOHXPEkgO/5wTVGLF92gxFz1IU
o/DM8j2qTgU4SrDuvsXnvNAAYW+9ysKKIe4tJ5OMDT0i8Y4SkNy86icbJ3w5
R1bHzdYE1Z3Jzum55qcObTwfCk9x0PbOBQ4zxcaesM7BHTQ1oXcmTtwbWovs
5dcais/PWa2FJxcNezGMcjVHDISU09K6tWPrpk3HrkIGampBAuo8fJLXTL2t
GMI8JcFXVVvPP60K3hapISvXdcHYkSvP6Ls52MCtumFeMKz+XCdjEY+jpVhf
XbTpHtQ6qkJl0/KNykGIg2RHsvHIET9ei8p1OyYuZfYcB06yvPLHFv1Wqs9d
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
     "], {{0, 85}, {431, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{431, 85},
   PlotRange->{{0, 431}, {0, 85}}]], "Input"],
 "\n\n\nThird, separate the left table into multiple tables which sum to it \
component-wise, however you like, and similarly for the right table, then \
number the new tables and predict + for those which came from the left and - \
for those which came from the right. For example:\n\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJztnQdcVFfe/n33zft/993sbjb7Jpt9dzdZ02OKpndjYm+JPbZYErtg74oN
FUVjl6YCAiq9N1FQiSJYQIqV3rvAMMAw/X/uOTMjwpQ7lBl0nm8+GYc7d+65
c37P/Z3nnnvuuS//smTs3N/16NFjxe/Jy9if13y3fPnP68b9hfwxYfGKBfMW
z5k9bPHKOfPmLP/8l/8kC6+Q/7eSN9x7JQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHlcUcjUK
hUnK4zBFQcAQpg49ib2pSgJ8UShMLALte0GKN1/pwAAtNGK+MCF7dGtM3ppo
3Qm4i8cMxaOJv+vFo5B3cQGAJ61D3+UWALmh+0GajZZ/mskHttoL0L2Qm7qR
0Apaju6MyY2Ejr0wR6mg/VCdiHPTk1NvpV9PuV9Pl3VZYXKZVEa2Lqurrq5p
6KpSAD9omMU5GSmp6ekpKfeECrqsq4JPY8+9aSwqqeuiMoDx0OO/Ou9Gclp6
SvK9YqGyC49/HXsgl8loVigrrW6WmbZswAcqiOrcjGSSKK6nFTeY3ltoNCIo
ra6FRrodCmYkmnPTU9Iz0q6n3mtgS026D3AXjx2sw7r+wuHdm+2dAiNC3A7s
tN3lXybjPujCc4kHKSsGTbLzu8u9R9+HmaChr/vNa/vqXa6BoaEn927Z7BRY
LFZ20UUM1TYVVac2Tx24PpJ7K0PozQy7qCnMjLHbssnJOzjU12vHehuftHJl
V6lA606o/s3wWfvJlN15kpbLgPlh/Z+ZkV5b1u3wDgn1PXlk/cpDaRUiU17R
UBdU5bNi4hS7EKoRZI/uA0skNZEe+9Ztdw4JCzp5eOvKfZEVzea46gV38fgg
l3HJpTDCtu+Y9TmqZQ92TB090+km/VTWiephffS19+L3rlswa/aI53v0sgko
UuLym5lg1Z53ZvdXgzdkq8JcZT/mhyVO15WdHxRaQGP2ic1rli2Y+t6zf+6z
IUpJLSichjlRyGmXQc66CWOXn7rPltVd3D/4qyUp9WzQXZfvAW2gas+5/rps
wZzv3/7bHwZsKmLLu7pkwA8FHdQny4mYMGT8qUxVWrhoP+ereV71phm8q9LI
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
QQEfYEEBLChgwF0Ag0AkgA+woIAPsKAAFhQw4C6AQSASwAdYUMAHWFAACwoY
cBfAIBAJ4AMsKOADLCiABQUMuAtgEIgE8AEWFPABFhTAggIG3AUwCEQC+AAL
CvgACwpgQQED7gIYBCIBfIAFBXyABQWwoIABdwEMApEAPsCCAj7AggJYUMCA
uwAGgUgAH2BBAR9gQQEsKGDAXQCDQCSAD7CggA+woAAWFDDgLoBBIBLAB1hQ
wAdYUAALChhwF8AgEAngAywo4AMsKIAFBQy4C2AQiATwARYU8AEWFMCCAgbc
BTAIRAL4AAsK+AALCmBBAQPuAhgEIgF8gAUFfIAFBbCggAF3AQwCkQA+wIIC
PsCCAlhQwIC7AAaBSAAfYEEBH2BBASwoYMBdAINAJIAPsKCAD7CgABYUMOAu
gEEgEsAHWFDAB1hQAAsKGHAXwCAQCeADLCjgAywogAUFDLgLYBCIBPABFhTw
ARYUwIICBtwFMAhEAvgACwr4AAsKYEEBA+4CGAQiAXyABQV8gAUFsKCAAXcB
DAKRAD7AggI+wIICWFDAgLsABoFIAB9gQQEfYEEBLChgwF0Ag0AkgA+woIAP
sKAAFhQw4C6AQSASwAdYUMAHWFAACwoYcBfAIBAJ4AMsKOADLCiABQUMuAtg
EIgE8AEWFPABFhTAggIG3AUwCEQC+AALCvgACwpgQQED7gIYBCIBfIAFBXyA
BQWwoIABdwEMApEAPsCCAj7AggJYUMCAuwAGgUgAH2BBAR9gQQEsKGDAXQCD
QCSAD7CggA+woAAWFDDgLoBBIBLAB1hQwAdYUAALChhwF8AgEAngAywo4AMs
KIAFBQy4C2AQiATwARYU8AEW1GJRKBRyuVz5qAUViURkubl3DZgHuAtgEIgE
8AEWFPCB5BDiQzQWlLxHVrE0JBIJib6NjY25dwSYmebmZnICwtwFaTLYGQoA
LYFIAB/YqQqzoEQwpJUx9x6BbofGbV6+fJnkk4SEBPYnssqTDevnvHv37pEj
RwQCAXlPom9ra0veHDt2LDY2VgkNWB6aiG/YsIG5i1bLAdBcImEi0bQguHQC
NGjEQFLHexTz7g/otgQHB8+bN6+qqiotLY3kk4yMDGJLfvrpp/T0dCWyypML
i2x5eTmJ9UcffXT//v2nnnpq7ty5a9as6dOnT1JSkhLGw2JgYiBe4tdffyW+
gvxJTkZINiALfXx8FixYUFdXZ+59BGaGiYSclezevdvGxqalSDw9PVesWMHO
ZIGFw3RSUVGxZMkSd3d3Je0F/fDDD4lyiGz2798PUwEYCkphYeHMmTP79u3r
4eHxH//xH4sWLSLvN2/eLBQK2Qrm3k3QVWiCu3Xr1jfeeOP3v/89aVDmz5/f
0NCgxNmHhcEO9mvXrn3xxRdWVlYrV64k2YCcj3zyySenT59WQg8Wj0YAiYmJ
n332mbW1NRPJ0qVLP/jgAyIStBdAqdaJRCIJCAjo2bOnk5MTUcu//vWvWbNm
9e/f//Lly9AJ0KBRgp2d3TPPPNODQkRi3r0CJoMIgF1sJScdJPTDhg1jo3cw
GNgC0bQdU6dOZdng9ddfr6qqUsJ/gkchWYKI5M9//jMRCfEVNTU1SogEtCEn
J4f4zz/84Q9EJ+RUxdy7A7ojmpuPVqxY8dRTT/n7+ytpM4R8YjmQWJM2ZeXK
lQUFBUr4TwuGhb6pqemrr776y1/+cu/ePSXNBubeL9CN0Ijk66+/JiIpLCxU
QiSgDaw3g+SQP/7xj3379tUM5DD3foFuB3GhRB7l5eUhISFK9SU5c+8UMB0t
w43QWzjMYCQnJ7M7EzEeGLQFIgF8YDqJjo7Ozc1VQieAB3AgFgtJF4g+aAn0
AAwCkQA9QB6AJ5phgQAAC0dGMfdegG4NRAL4gJljAQCGwekqAAAAAMwAxoAC
AChIBgAAAAAwBQpJc7MEV0sAAAAAYGLEDRUVFU0wIZaJrOac75GzBdxgYBk0
YNHQJyXVV5dUCyAEAAAAXYpCQZua4ssHHA/fqldycyfgEpwlQedrK/PYbeV5
m5vcT4rwWzAKeoNJzZXj209FN9IFZt4hAAAATy4qC1oQZ7tnx03uMb+woJYF
taDlpw+s8L4HC2rpMAtaFX9g9bGgBrrAzDsEAADgyUVlQQvP2+2zT4UFtRQU
9LlYHFLyf3OJ196lJ2+JuLcSKV0sx/0oFgizoNW/HV7vFgoLCgAAoEtQyCUS
MaG5WcT9k3PWdveO69XknUjUzC2QSKRofiwGSdjR9eHl5t4LYCYUcpmY0tzU
RF7Lzu9f7RJQQxew5RJ0jgOFXCoR60Yig0YATSZ6ZYJUArQhzTji6lRm7r0A
XQ89/sW1yefD/P39AwIC/Mg/PseXzBy55IAP95b7m3xwLqu6WYleMMvkrqdd
0CVz7wQAAIAnDQV9VIGoINF+zSJra+tF3Iu19cwxX3z95aS55J0VW7TK1iu7
ga6OK7JPEKoJHxsLvfeuI1FespiG32rW4L7vD5m6kHtrRfWw2D4+V6jEE9ae
dFh8i674ruCivoiFf/bYbz4aMGI+E8ISTiH2J+K5WxWRDCwTGnX5g4zDK5lK
HmXRoiWcUDYG3axSYiCXBcOSSVVqpA2nisVtdEJTiY1TapVUiZbFkqGhl9Tk
xYbS/i5/2u3lvHnyjKm/enJ/sm6wkDPXqsSa1cETTrT7pjO15t4JYHro0V2b
mxLMcoGvL3l1s/1lzILVJ1l3eAD3eu5qdjNdG8nAIuHCrmgojQ+hkvBvBdVI
QGRaMe2zgEYsFRZ5YfHtCHaBrY1MuCURl4qFciVSCWhFQ/IB58P55t4LYCoU
MolqwA432q+xyOPXxZ7pDdxbNhRYLEFnhuWS5rbN97y5dwIAAMATikLBbomW
SiXcP3mx2/fYpdSQdxLVLdEYXG4ZqCdlWu59F5MyWSjqZCCTisXkteLigbXH
ggTq+RK4XABVAKVaJTqARgAHZAKMQTUpU9GFnft3p2FSJsuDTU1/wn6hB6am
t3hUkzJdOrLBHZMyAQAA6FpUFjQ/xmbH5ht1SlhQS4M+kbH2QpDzhSLOfiD8
loxqavq43Usc/YR0gZl3CAAAwJMMbWUEBYnXkiq4+48wTBgAS4Ue/aLC5Itp
mRJz7wsAAAAAnngUcsy3AwAAAACTo1DI5DJ4EAAAd0MBnT0YAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYkf8PxPV8Rg==
     "], {{0, 198}, {897, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{897, 198},
   PlotRange->{{0, 897}, {0, 198}}]], "Input"],
 "\n\n\nHere, the ",
 StyleBox["e_i",
  FontSlant->"Italic"],
 " are non-negative whole numbers where, for example, ",
 StyleBox["e_1 + e_5 + e_9 = N_0 * a_0, ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["e_13 + e_17 = N_0 * b_0, ",
  FontSlant->"Italic"],
 "and so on.\n\nThis crate-and-boxes problem and strategy generate the \
confusion tables we started with. Furthermore, any crate-and-boxes problem \
and decision rule which generate those confusion tables can be recovered in \
this way, for suitable choices of ",
 StyleBox["N_0, N_1",
  FontSlant->"Italic"],
 " and suitable separation.\n\nGiven a set of score confusion tables, can we \
recover a crate-and-boxes problem and risk assignment which generate them? \
Yes, easily. The procedure is similar.\n"
}], "Text",
 CellChangeTimes->{{3.8117997273611846`*^9, 3.8117997275021067`*^9}, 
   3.8117998734097977`*^9, 3.8117999321901093`*^9, {3.811800001840023*^9, 
   3.811800109180089*^9}, {3.8118029215322437`*^9, 3.8118029283339562`*^9}, {
   3.811802972472308*^9, 3.8118031700399723`*^9}, {3.811803244377531*^9, 
   3.8118033059335613`*^9}, {3.8118619033541546`*^9, 
   3.8118619033550887`*^9}, {3.811862174835863*^9, 3.8118621848969307`*^9}, {
   3.8118624682763214`*^9, 3.8118624955176563`*^9}, {3.8118625492124424`*^9, 
   3.8118625963809757`*^9}, {3.8118630631524653`*^9, 3.811863115944315*^9}, {
   3.8119463680792265`*^9, 3.8119463739831543`*^9}, {3.811946829960059*^9, 
   3.8119469314599743`*^9}, {3.811946962102825*^9, 3.811947258301789*^9}, {
   3.811947461629616*^9, 3.8119474811916223`*^9}, {3.811947555887038*^9, 
   3.8119475639576902`*^9}, {3.8119476814732523`*^9, 
   3.8119476906439257`*^9}, {3.811947763855736*^9, 3.8119477675421166`*^9}, {
   3.811948071958386*^9, 3.8119483698197556`*^9}, {3.8119484029055767`*^9, 
   3.811948565088456*^9}, {3.811948598438819*^9, 3.8119486951312585`*^9}, {
   3.811948764282446*^9, 3.8119488530909863`*^9}, {3.8119489163476534`*^9, 
   3.811949007482794*^9}, {3.8119492811380663`*^9, 3.811949355450631*^9}, {
   3.8119495325305204`*^9, 3.811949596660839*^9}, {3.8119497584885826`*^9, 
   3.8119497744824605`*^9}, {3.8119498096658506`*^9, 
   3.8119498307578754`*^9}, {3.811951480218653*^9, 3.811951514408292*^9}, {
   3.8119515696308117`*^9, 3.8119516151470823`*^9}, {3.811951697167926*^9, 
   3.8119517049757056`*^9}, {3.81195173919099*^9, 3.8119518167844734`*^9}, {
   3.811952194403757*^9, 3.811952200091611*^9}, {3.811952265218943*^9, 
   3.8119523291276417`*^9}, {3.8119527295545597`*^9, 
   3.8119527631569395`*^9}, {3.81195296259753*^9, 3.8119530920190787`*^9}, {
   3.8119531299830923`*^9, 3.811953192411647*^9}, {3.811953250054696*^9, 
   3.811953272893713*^9}, {3.8119533224559984`*^9, 3.811953447705485*^9}, {
   3.811953486846227*^9, 3.811953566222455*^9}, 3.8119580646758423`*^9, {
   3.81195812085643*^9, 3.8119581217520337`*^9}, {3.8119582433204165`*^9, 
   3.811958283128371*^9}, {3.811961875554408*^9, 3.8119619324625463`*^9}, 
   3.811963234298416*^9, {3.8119804119302783`*^9, 3.8119804128635645`*^9}, {
   3.8119804729384584`*^9, 3.8119804750992594`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.5 Generalizing", "Subsection",
 CellChangeTimes->{{3.81194431858583*^9, 3.8119443311338253`*^9}, {
  3.811945681542859*^9, 3.81194568269633*^9}, {3.811953974931861*^9, 
  3.8119539784021993`*^9}, {3.8119541095638466`*^9, 3.8119541113782105`*^9}, {
  3.811960797280019*^9, 3.811960797711934*^9}, {3.811978151869334*^9, 
  3.8119781519251785`*^9}}],

Cell[TextData[{
 "A ",
 StyleBox["prediction problem ",
  FontSlant->"Italic"],
 "is given by a joint distribution on three random variables:\n    - the \
class C, which is either + or -\n    - the group G, which is either 0 or 1\n  \
  - the feature vector F\n\nA prediction problem is discrete if F is \
discrete.\n\nCrate-and-boxes problems are, in effect, discrete prediction \
problems where all probabilities are rational. We\[CloseCurlyQuote]re really \
interested in prediction problems, not just crate-and-boxes problems.\n\n\
Given a particular prediction problem, we can distinguish two kinds of \
strategies, as before:",
 StyleBox["\n    - ",
  FontSlant->"Italic"],
 "a ",
 StyleBox["decision rule",
  FontSlant->"Italic"],
 " is a function from F to {+, -}\n    - a ",
 StyleBox["risk assignment",
  FontSlant->"Italic"],
 " is a function from F to [0,1]\n\nA prediction problem and a strategy \
generate a joint distribution on C, G, X, aka a set of confusion tables. \
Given a joint distribution on C, G, X, can we recover a prediction problem \
and strategy which generate them? Yes. The procedure is similar to above, \
except that (i) instead of multiplying by suitable ",
 StyleBox["N_0",
  FontSlant->"Italic"],
 " and ",
 StyleBox["N_1",
  FontSlant->"Italic"],
 ", we just multiply by ",
 StyleBox["P(G=0)",
  FontSlant->"Italic"],
 " and ",
 StyleBox["P(G=1)",
  FontSlant->"Italic"],
 ", and (ii) we require that the ",
 StyleBox["e_i",
  FontSlant->"Italic"],
 " are probabilities, not positive whole numbers.\n\nAs well as generalizing \
the problem, from crate-and-boxes problems to prediction problems, we can \
also generalize the strategies, by adding randomization:\n    - a ",
 StyleBox["randomized decision rule",
  FontSlant->"Italic"],
 " is a function from F to a probability distribution over {+, -}\n    - a ",
 StyleBox["randomized risk assignment",
  FontSlant->"Italic"],
 " is a function from F to a probability distribution over [0,1]\n    \nA \
prediction problem and a randomized decision rule still generate +/- \
confusion tables; a prediction problem and a randomized risk assignment still \
generate score confusion tables. Given a joint distribution on C, G, X, can \
we recover a prediction problem and randomized strategy which generate them? \
Yes. The procedure is similar to above. The difference comes at the \
separation stage, where we have more freedom: we separate the left and right \
tables into ",
 StyleBox["weighted ",
  FontSlant->"Italic"],
 "sums of other tables, with the weights corresponding to the randomization. \
Details omitted.\n\nIn what follows, I\[CloseCurlyQuote]ll talk about \
prediction problems and joint distributions, rather than crate-and-boxes \
problems and confusion tables, but it helps to keep the latter in mind."
}], "Text",
 CellChangeTimes->{{3.811944337622493*^9, 3.811944506789642*^9}, {
   3.811944839814413*^9, 3.811944920285683*^9}, {3.811944954334155*^9, 
   3.8119449829561987`*^9}, {3.811945043494284*^9, 3.8119451611697493`*^9}, {
   3.8119452083584733`*^9, 3.8119452473585987`*^9}, {3.8119452995427637`*^9, 
   3.8119455829638815`*^9}, {3.8119456259658847`*^9, 3.811945633638726*^9}, {
   3.8119457814683375`*^9, 3.8119458124678144`*^9}, 3.8119461352459188`*^9, {
   3.8119461975344505`*^9, 3.811946306315304*^9}, {3.811947624749631*^9, 
   3.811947636434636*^9}, {3.811947670189606*^9, 3.8119476994055886`*^9}, {
   3.8119536489757123`*^9, 3.811953681573283*^9}, {3.8119537943416724`*^9, 
   3.8119538363499775`*^9}, {3.811953881299241*^9, 3.8119540805651484`*^9}, {
   3.811954114238248*^9, 3.8119542174188824`*^9}, {3.811954266166148*^9, 
   3.8119546610668263`*^9}, {3.8119547331220045`*^9, 3.811954767132779*^9}, {
   3.811954808337859*^9, 3.811954821179266*^9}, {3.8119583010679207`*^9, 
   3.81195838685246*^9}, {3.8119584469228573`*^9, 3.811958529464843*^9}, {
   3.811958577324811*^9, 3.811958872088684*^9}, {3.811958909705038*^9, 
   3.81195897712118*^9}, {3.811959014549094*^9, 3.81195908962718*^9}, {
   3.81195916784577*^9, 3.8119591730960217`*^9}, {3.8119592947379885`*^9, 
   3.8119593045968647`*^9}, {3.811961960670307*^9, 3.811961981495236*^9}, {
   3.8119633222240424`*^9, 3.8119633266543274`*^9}, {3.811970720046034*^9, 
   3.811970731698348*^9}, {3.811980535455793*^9, 3.811980550048047*^9}, {
   3.811980590397732*^9, 3.8119805914162245`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2. Applying PrSAT to questions in algorithmic fairness", "Section",
 CellChangeTimes->{{3.8117802776870985`*^9, 3.811780281287016*^9}, {
  3.811954675653363*^9, 3.8119547119787855`*^9}, {3.81196080166203*^9, 
  3.811960801805962*^9}, {3.811978155788813*^9, 3.811978155868064*^9}}],

Cell[CellGroupData[{

Cell["2.1 Theory", "Subsection",
 CellChangeTimes->{{3.811961468093618*^9, 3.811961474756859*^9}, {
  3.8119781567734365`*^9, 3.811978156884719*^9}}],

Cell[TextData[{
 "We\[CloseCurlyQuote]ll be looking at questions of the form: ",
 StyleBox["Does there exist a prediction problem and strategy satisfying \
such-and-such constraints?",
  FontSlant->"Italic"],
 " If there does, PrSAT will help us construct an example. If there doesn\
\[CloseCurlyQuote]t, PrSAT will tell us so. This section explains how.\n\nThe \
constraints we\[CloseCurlyQuote]ll be interested in are of two kinds: ",
 StyleBox["confusion constraints ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["non-confusion constraints",
  FontSlant->"Italic"],
 ".\n\nConfusion constraints are constraints on the joint distribution on C, \
G, X. Examples:\n    - the false negative probabilities are equal across \
groups\n    - the base rates are equal across groups\n    - you don\
\[CloseCurlyQuote]t always make the same prediction / assign the same score, \
no matter the feature vector\n\nFor any prediction problems and strategies, \
if they generate the same joint distribution on C, G, X, then all or none \
satisfy a given confusion constraint.\n\nAll other constraints are \
non-confusion constraints. Examples:\n    - the prediction problem admits \
perfect prediction (i.e. there exists a decision rule such that Pr[(C = + and \
X = +) or (C = - and X = -)] = 1)\n    - the joint distribution on C, G, F is \
regular\n    - F and G are independent\n    \nWhether a prediction problem \
and strategy satisfy a non-confusion constraint is not determined by what \
joint distribution on C, G, X they generate: there exist prediction problems \
and strategies which generate the same joint distribution on C, G, X, but \
some satisfy a given non-confusion constraint and others \
don\[CloseCurlyQuote]t.\n\nPrSAT is a decision procedure for the probability \
calculus. So, in particular, given a confusion constraint it will return a \
joint distribution on C, G, X satisfying it, if there is one, or else tell us \
that there is no such joint distribution. In the former case, we can use the \
procedure described in Sections 1.4 and 1.5 to construct a prediction problem \
and strategy satisfying the constraint. In the latter case, we can conclude \
that no such prediction problem and strategy exist. So much for confusion \
constraints.\n\nWhat if we add a non-confusion constraint too? That makes \
things trickier because, by definition, whether a non-confusion constraint is \
satisfied isn\[CloseCurlyQuote]t settled by the joint distribution on C, G, \
X. Here\[CloseCurlyQuote]s a workaround. Given a confusion constraint ",
 StyleBox["P",
  FontSlant->"Italic"],
 " and a non-confusion constraint ",
 StyleBox["Q",
  FontSlant->"Italic"],
 ", come up with a proxy confusion constraint ",
 StyleBox["R",
  FontSlant->"Italic"],
 " such that:\n\n    If there exists a prediction problem and strategy \
satisfying ",
 StyleBox["P",
  FontSlant->"Italic"],
 " and ",
 StyleBox["R",
  FontSlant->"Italic"],
 ", then there exists a prediction problem and strategy satisfying ",
 StyleBox["P",
  FontSlant->"Italic"],
 " and Q",
 StyleBox[".\n    \n",
  FontSlant->"Italic"],
 "Then input ",
 StyleBox["P ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["Q",
  FontSlant->"Italic"],
 " to PrSAT. On the one hand, if PrSAT tells you that no joint distribution \
satisfies ",
 StyleBox["P ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["Q",
  FontSlant->"Italic"],
 ", you can conclude that no prediction problem and strategy satisfies ",
 StyleBox["P ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["R",
  FontSlant->"Italic"],
 ". On the other hand, if PrSAT returns a joint distribution which satisfies ",
 StyleBox["P ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["Q",
  FontSlant->"Italic"],
 ", you can\[CloseCurlyQuote]t conclude from that that some prediction \
problem and strategy satisfies ",
 StyleBox["P ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["R",
  FontSlant->"Italic"],
 ". However, especially if you choose a nice ",
 StyleBox["Q",
  FontSlant->"Italic"],
 ", you may be able to conclude on other grounds that such a prediction \
problem and strategy exists, and it may even be clear how to construct them \
from PrSAT\[CloseCurlyQuote]s joint distribution, along the same lines as \
described in Sections 0.4 and 0.5.\n\nA simple example. Does there exist a \
prediction problem and strategy such that the false positive rates are equal \
across groups (a confusion constraint) and the problem \
doesn\[CloseCurlyQuote]t admit perfect prediction (a non-confusion \
constraint)? To use PrSAT to answer the question, we can define a proxy \
confusion constraint: namely, Pr[(C = + and X = +) or (C = - and X = -)] \
\[NotEqual] 0, 1. Then we input our original confusion constraint and this \
proxy into PrSAT. PrSAT will, in this case, return a joint distribution \
satisfying them. And, happily, it\[CloseCurlyQuote]s clear how to construct \
from that a prediction problem and strategy satisfying the original confusion \
and non-confusion constraints.\n\nTo summarize. We\[CloseCurlyQuote]ll be \
looking at questions of the form: ",
 StyleBox["Does there exist a prediction problem and strategy satisfying \
such-and-such constraints?",
  FontSlant->"Italic"],
 " First, suppose our question just involves confusion constraints. Then \
things are easy: if the answer is yes, PrSAT plus the procedure in Sections \
0.4 and 0.5 returns a witness; if the answer is no, PrSAT will tell us so. \
Second, suppose our question involves non-confusion constraints too. Then \
things are trickier. But PrSAT can still be helpful, especially if we come up \
with a nice confusion constraint to stand proxy for the non-confusion \
constraint.\n\nYou might think that this is needlessly complicated. After \
all, a prediction problem and strategy is in effect a joint distribution on \
C, G, F, X. So can\[CloseCurlyQuote]t we just ask PrSAT about the \
distribution on C, G, F, X directly, instead of asking it about C, G, X and \
then reverse-engineering C, G, F, X? In other words, can\[CloseCurlyQuote]t \
we just ask PrSAT about prediction problems and strategies directly, instead \
of asking it about confusion tables and then reverse-engineering prediction \
problems and strategies? That would be simpler, and would let us skip this \
irritating business about non-confusion constraints, too.\n\nThe trouble is \
that prediction problems and strategies aren\[CloseCurlyQuote]t just any old \
joint distributions on C, G, F, X. They\[CloseCurlyQuote]re special: X has to \
be a function of F. Furthermore, when we ask PrSAT questions, we don\
\[CloseCurlyQuote]t want to limit how many different values F can take. These \
make it hard to ask PrSAT about prediction problems and strategies directly. \
Perhaps it can be done, but I don\[CloseCurlyQuote]t see how. That\
\[CloseCurlyQuote]s why I proceed indirectly, by asking PrSAT about confusion \
tables and then reverse-engineering prediction problems and strategies."
}], "Text",
 CellChangeTimes->{{3.8117802886870747`*^9, 3.8117803164859147`*^9}, 
   3.811790982251676*^9, {3.8118840469377537`*^9, 3.8118841992450027`*^9}, {
   3.811884269788982*^9, 3.8118845485406685`*^9}, {3.8118846046139116`*^9, 
   3.8118846385725794`*^9}, {3.8118847390140295`*^9, 
   3.8118849548194222`*^9}, {3.811884990699354*^9, 3.811885258291543*^9}, {
   3.811885313206173*^9, 3.811885313437162*^9}, {3.811885471340519*^9, 
   3.8118854715893264`*^9}, {3.8118856091258574`*^9, 3.811885610331921*^9}, {
   3.811885646976506*^9, 3.811885647860995*^9}, {3.8118857184851727`*^9, 
   3.8118857189072824`*^9}, {3.8118858228128614`*^9, 
   3.8118859038940296`*^9}, {3.811885956707898*^9, 3.811886207820479*^9}, {
   3.8118862577096076`*^9, 3.811886303236272*^9}, {3.811886339543806*^9, 
   3.8118864263076754`*^9}, {3.8118865048753996`*^9, 3.811886512494791*^9}, {
   3.811886603828757*^9, 3.811886690385047*^9}, {3.8118867366959763`*^9, 
   3.811886769244282*^9}, {3.81194385804775*^9, 3.81194385982813*^9}, {
   3.811943913759623*^9, 3.811943927411618*^9}, {3.811943971770847*^9, 
   3.8119440317728724`*^9}, {3.811944070590559*^9, 3.8119440707444353`*^9}, {
   3.8119460547528086`*^9, 3.811946055893571*^9}, {3.811959106445099*^9, 
   3.811959192225999*^9}, {3.811959233876869*^9, 3.8119592749603863`*^9}, {
   3.811959312066824*^9, 3.811959676498065*^9}, {3.811959712073578*^9, 
   3.8119598689896097`*^9}, {3.811959974162525*^9, 3.8119601149614305`*^9}, {
   3.8119601573007264`*^9, 3.811960265081153*^9}, {3.8119603056695557`*^9, 
   3.811960532170963*^9}, {3.811960576069158*^9, 3.811960649006032*^9}, {
   3.811960699880084*^9, 3.8119607069520197`*^9}, {3.8119607551598454`*^9, 
   3.811960757224924*^9}, {3.8119609124226727`*^9, 3.8119609380878305`*^9}, {
   3.8119610334700875`*^9, 3.811961033710474*^9}, {3.8119610685768657`*^9, 
   3.8119611152319255`*^9}, {3.811961154720786*^9, 3.811961225423769*^9}, {
   3.8119612579988427`*^9, 3.8119613727662683`*^9}, {3.8119614093610864`*^9, 
   3.8119614574534545`*^9}, {3.8119615202458677`*^9, 3.811961545803236*^9}, {
   3.811961577517682*^9, 3.8119616127016068`*^9}, {3.8119624095583525`*^9, 
   3.811962415512957*^9}, {3.811965351798177*^9, 3.8119654001672044`*^9}, {
   3.811965478938935*^9, 3.811965513691497*^9}, {3.811965924902671*^9, 
   3.8119659871476526`*^9}, {3.8119660218997073`*^9, 
   3.8119660383237085`*^9}, {3.811966084717697*^9, 3.811966085090643*^9}, {
   3.8119661346300793`*^9, 3.8119661504057937`*^9}, {3.8119662257950144`*^9, 
   3.8119662261335974`*^9}, {3.8119675504609456`*^9, 3.811967556004284*^9}, {
   3.811970512930707*^9, 3.8119705149596996`*^9}, {3.811970572148142*^9, 
   3.8119705995847254`*^9}, {3.8119706300646124`*^9, 3.811970714495456*^9}, {
   3.8119707448400183`*^9, 3.811970745732179*^9}, {3.811970841394702*^9, 
   3.8119708465181017`*^9}, {3.8119709020444965`*^9, 
   3.8119709943944883`*^9}, {3.8119710476363564`*^9, 
   3.8119710710383425`*^9}, {3.8119711132095923`*^9, 3.811971121362439*^9}, {
   3.8119711710141945`*^9, 3.8119712067746973`*^9}, {3.8119713013424034`*^9, 
   3.811971323645955*^9}, {3.8119714006493516`*^9, 3.8119715235944614`*^9}, {
   3.8119715562412896`*^9, 3.811971557154298*^9}, {3.811971597624911*^9, 
   3.811971611754411*^9}, {3.811971810321756*^9, 3.811971827754799*^9}, {
   3.8119719105140553`*^9, 3.8119719645705585`*^9}, {3.8119721260500345`*^9, 
   3.811972205678364*^9}, {3.8119722591555276`*^9, 3.8119725024356766`*^9}, {
   3.811972538712615*^9, 3.8119726201966887`*^9}, {3.8119726594192333`*^9, 
   3.811972713855528*^9}, {3.811972755167205*^9, 3.811972914937791*^9}, {
   3.811972949019408*^9, 3.8119732390127754`*^9}, {3.811973299137149*^9, 
   3.8119734464185724`*^9}, {3.811973512722418*^9, 3.8119738019674377`*^9}, {
   3.811973877943817*^9, 3.8119740282384477`*^9}, {3.8119740963639135`*^9, 
   3.8119741123367124`*^9}, 3.8119742085444136`*^9, {3.811974269808537*^9, 
   3.811974316347454*^9}, {3.8119743665342913`*^9, 3.811974446917691*^9}, {
   3.8119744819892797`*^9, 3.811974596456621*^9}, {3.811974626953737*^9, 
   3.8119746328292766`*^9}, {3.8119747027766275`*^9, 3.811974873558957*^9}, {
   3.8119749038769455`*^9, 3.8119751411541557`*^9}, {3.8119751734537897`*^9, 
   3.8119752109106817`*^9}, {3.811975289989091*^9, 3.8119755729192595`*^9}, {
   3.8119806191858845`*^9, 3.811980624245008*^9}, {3.811980654893944*^9, 
   3.8119806572283874`*^9}, {3.8119807104332814`*^9, 3.811980712217094*^9}, {
   3.811980804988702*^9, 3.811980805173252*^9}, {3.8119808421548448`*^9, 
   3.811980926381694*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.2 PrSAT and risk assignments", "Subsection",
 CellChangeTimes->{{3.8119629186057024`*^9, 3.8119629276536007`*^9}, {
  3.8119781610047693`*^9, 3.811978161091365*^9}}],

Cell[TextData[{
 "Decision rules are easy to work with in PrSAT. Risk assignments are harder, \
for two reasons: (i) they have arbitrarily many possible outputs; (ii) \
different risk assignments may have different possible outputs.\n\nHere\
\[CloseCurlyQuote]s one (pretty limited) workaround. Instead of asking PrSAT \
about ",
 StyleBox["all",
  FontSlant->"Italic"],
 " risk assignments, fix some possible risk scores ",
 StyleBox["s_1",
  FontSlant->"Italic"],
 ", ..., ",
 StyleBox["s_n",
  FontSlant->"Italic"],
 " in advance, and then ask PrSAT about all risk assignments with possible \
outputs ",
 StyleBox["s_1, ..., s_n. ",
  FontSlant->"Italic"],
 "For example, below I ask PrSAT about all risk assignments with four \
possible outputs: .2, .4, .6, .8.\n\nIt would be nice to have a better \
workaround, but I don\[CloseCurlyQuote]t see how. Anyway, the issue is often \
moot, as Section 2.3 explains."
}], "Text",
 CellChangeTimes->{{3.811963170182119*^9, 3.8119631776611705`*^9}, {
  3.8119765391178007`*^9, 3.8119765411176615`*^9}, {3.811976582085775*^9, 
  3.8119771072527065`*^9}, {3.8119809317027864`*^9, 3.8119809858710704`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.3 PrSAT in practice", "Subsection",
 CellChangeTimes->{{3.811962987009124*^9, 3.811962995484584*^9}, 
   3.8119781635804873`*^9}],

Cell["\<\
As Branden Fitelson notes in his explainer on PrSAT: \
\[OpenCurlyDoubleQuote]The complexity of the decision procedure used by PrSAT \
grows (doubly) exponentially in the number of propositions involved in the \
set of statements.  For sets involving three or more events, the decision \
procedure in PrSAT can consume significant computational resources.\
\[CloseCurlyDoubleQuote] So be aware that for some questions, often questions \
involving risk assignments with multiple scores, PrSAT may take impractically \
long to return an answer.\
\>", "Text",
 CellChangeTimes->{{3.8119630124690995`*^9, 3.81196314997244*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.4 PrSAT and undefined probabilities", "Subsection",
 CellChangeTimes->{{3.811964282693798*^9, 3.8119642942203627`*^9}, {
  3.8119781652611628`*^9, 3.8119781653886747`*^9}}],

Cell["\<\
How does PrSAT treat conditional probabilities when the event being \
conditioned on has zero probability? Somewhat surprisingly:\
\>", "Text",
 CellChangeTimes->{{3.811975592639123*^9, 3.8119756482063007`*^9}, {
  3.811976416486245*^9, 3.811976426182559*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M", " ", "=", " ", 
  RowBox[{"PrSAT", "[", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"X", "\[And]", "Y"}], "]"}], "\[Equal]", "0"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"X", " ", "\[And]", 
        RowBox[{"\[Not]", "Y"}]}], "]"}], " ", "\[Equal]", "0"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "X"}], "\[And]", "Y"}], "]"}], " ", "\[Equal]", 
      "1"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "X"}], "\[And]", 
        RowBox[{"\[Not]", "Y"}]}], "]"}], "\[Equal]", "0"}]}], 
    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.8119758247854214`*^9, 3.8119758603439255`*^9}, {
  3.8119759804436955`*^9, 3.8119760642907457`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"X", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "4"]}], "}"}]}], ",", 
     RowBox[{"Y", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "4"]}], "}"}]}], ",", 
     RowBox[{"\[CapitalOmega]", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "1"], ",", 
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "4"]}], "}"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "1"], "\[Rule]", "0"}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "2"], "\[Rule]", "0"}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "3"], "\[Rule]", "1"}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "4"], "\[Rule]", "0"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.811976068115591*^9, 3.811981590666028*^9, 
  3.8119817212556314`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EvaluateProbability", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"X", "|", "X"}], "]"}], ",", " ", 
     RowBox[{"Pr", "[", 
      RowBox[{"Y", "|", "X"}], "]"}], ",", " ", 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "Y"}], "|", "X"}], "]"}], ",", " ", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"X", "|", "X"}], "]"}], "\[Equal]", 
      RowBox[{"Pr", "[", 
       RowBox[{"Y", "|", "X"}], "]"}]}], ",", " ", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"Y", "|", "X"}], "]"}], "\[Equal]", 
      RowBox[{"Pr", "[", 
       RowBox[{"Y", "|", "X"}], "]"}]}], ",", " ", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "Y"}], "|", "X"}], "]"}], " ", "\[Equal]", 
      RowBox[{"Pr", "[", 
       RowBox[{"Y", "|", "X"}], "]"}]}]}], "}"}], ",", " ", "M"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.811976074225773*^9, 3.811976280628439*^9}, {
  3.811976310907135*^9, 3.8119764046025515`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "Indeterminate", ",", "Indeterminate", ",", 
   RowBox[{"1", "\[Equal]", "Indeterminate"}], ",", "True", ",", 
   RowBox[{"Indeterminate", "\[Equal]", "Indeterminate"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8119761336750593`*^9, 3.8119761855515075`*^9}, 
   3.8119762839755473`*^9, 3.81197634157895*^9, 3.8119764069355464`*^9, 
   3.8119815942816553`*^9, 3.8119817243276343`*^9}]
}, Open  ]],

Cell["\<\
So we may get some odd behavior with marginal cases below. I need to \
understand this better.\
\>", "Text",
 CellChangeTimes->{{3.8119764408619833`*^9, 3.8119765108683677`*^9}, {
  3.8119771307913623`*^9, 3.811977142971552*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.5 Notation", "Subsection",
 CellChangeTimes->{{3.8119614841756477`*^9, 3.8119614859205704`*^9}, {
  3.811962909199099*^9, 3.811962909350292*^9}, {3.8119629745666113`*^9, 
  3.811962974710455*^9}, {3.8119642970936627`*^9, 3.811964297196006*^9}, {
  3.8119781693963585`*^9, 3.8119781695266576`*^9}}],

Cell["\<\
We\[CloseCurlyQuote]ve been working with random variables, using expressions \
like \[OpenCurlyDoubleQuote]C = +\[OpenCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]C = -\[OpenCurlyDoubleQuote]. PrSAT works with \
propositional variables, using expressions like \[OpenCurlyDoubleQuote]c\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]\[Not]c\
\[CloseCurlyDoubleQuote]. We need to fix a translation scheme between these \
two ways of talking else we\[CloseCurlyQuote]ll get in to a muddle.

Here\[CloseCurlyQuote]s the scheme I use:
    - \[OpenCurlyDoubleQuote]C = +\[OpenCurlyDoubleQuote] becomes \
\[OpenCurlyDoubleQuote]c\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]C \
= -\[OpenCurlyDoubleQuote] becomes \[OpenCurlyDoubleQuote]\[Not]c\
\[CloseCurlyDoubleQuote]
    - \[OpenCurlyDoubleQuote]G = 0\[CloseCurlyDoubleQuote] becomes \
\[OpenCurlyDoubleQuote]g\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]G \
= 1\[CloseCurlyDoubleQuote] become \[OpenCurlyDoubleQuote]\[Not]g\
\[CloseCurlyDoubleQuote]
    - for decision rules, \[OpenCurlyDoubleQuote]X = +\[OpenCurlyDoubleQuote] \
becomes \[OpenCurlyDoubleQuote]x\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]X = -\[OpenCurlyDoubleQuote] becomes \
\[OpenCurlyDoubleQuote]\[Not]x\[CloseCurlyDoubleQuote]
    - for risk assignments with four possible outputs, s_1, ..., s_4, \
\[OpenCurlyDoubleQuote]X = s_1\[CloseCurlyDoubleQuote] becomes \
\[OpenCurlyDoubleQuote]x1 \[And] x2\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]X = s_2\[CloseCurlyDoubleQuote] becomes \
\[OpenCurlyDoubleQuote]x1 \[And] \[Not]x2\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]X = s_3\[CloseCurlyDoubleQuote] becomes \
\[OpenCurlyDoubleQuote]\[Not]x1 \[And] x2\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]X = s_4\[CloseCurlyDoubleQuote] becomes \
\[OpenCurlyDoubleQuote]\[Not]x1 \[And] \[Not]x2\[CloseCurlyDoubleQuote]

So, for example, \[OpenCurlyDoubleQuote]Pr(C = + and X = - | G = 1)\
\[CloseCurlyDoubleQuote] becomes \[OpenCurlyDoubleQuote]Pr[c \[And] \[Not]x | \
\[Not]g]\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.811962470300475*^9, 3.811962470373279*^9}, {
  3.811962541654889*^9, 3.811962821352297*^9}, {3.811962859043973*^9, 
  3.811962902063702*^9}, {3.8119771707827625`*^9, 3.811977626397019*^9}, {
  3.8119810100717683`*^9, 3.8119810197142706`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3. Defining the statistical criteria", "Section",
 CellChangeTimes->{{3.7702971782007284`*^9, 3.770297185319143*^9}, {
  3.8117700584803143`*^9, 3.811770061889746*^9}, {3.811798542615312*^9, 
  3.8117985458321533`*^9}, {3.811963468151164*^9, 3.8119634685083017`*^9}, {
  3.811978176341531*^9, 3.811978176461173*^9}, {3.811981737880092*^9, 
  3.811981737993136*^9}}],

Cell["Add your own!", "Text",
 CellChangeTimes->{{3.8119780916370926`*^9, 3.81197809378944*^9}}],

Cell[CellGroupData[{

Cell["3.1 General", "Subsection",
 CellChangeTimes->{{3.811977657885367*^9, 3.811977669676112*^9}, {
  3.811978178803026*^9, 3.811978178883614*^9}, {3.8119817401021614`*^9, 
  3.811981740239833*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"unequalBaseRates", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", "g"}], "]"}], " ", "\[NotEqual]", " ", 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Pr", "[", 
    RowBox[{"c", "|", "g"}], "]"}], "\[NotEqual]", 
   RowBox[{"Pr", "[", 
    RowBox[{"c", "|", 
     RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8119776874088125`*^9, 3.8119817732057714`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3.2 Specific to decision rules", "Subsection",
 CellChangeTimes->{{3.811774876765832*^9, 3.81177487887929*^9}, {
  3.8119634709895763`*^9, 3.8119634844198456`*^9}, {3.811978098230235*^9, 
  3.8119780983073196`*^9}, {3.8119781814291997`*^9, 3.8119781815310507`*^9}, {
  3.8119782281278896`*^9, 3.811978230813584*^9}, {3.811981742096072*^9, 
  3.8119817423991637`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalTruePositive", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"c", "\[And]", "x"}], "|", "g"}], "]"}], " ", "\[Equal]", " ", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"c", "\[And]", "x"}], "|", 
      RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8117739757629766`*^9, 3.811774039380555*^9}, 
   3.811780684432491*^9, {3.8117807155976744`*^9, 3.81178072502855*^9}, {
   3.811780799089269*^9, 3.8117808017750244`*^9}, {3.8117809660938854`*^9, 
   3.811780968978483*^9}, {3.8117881345187945`*^9, 3.811788136113925*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{"c", "&&", "x"}], "|", "g"}], "]"}], "\[Equal]", 
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{"c", "&&", "x"}], "|", 
     RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.811780725432823*^9, 3.8117808069993887`*^9, 
  3.811981776586475*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalTrueNegative", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Not]", "c"}], "\[And]", 
       RowBox[{"\[Not]", "x"}]}], "|", "g"}], "]"}], " ", "\[Equal]", " ", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Not]", "c"}], "\[And]", 
       RowBox[{"\[Not]", "x"}]}], "|", 
      RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8117740433924217`*^9, 3.8117740647441487`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Not]", "c"}], "&&", 
      RowBox[{"\[Not]", "x"}]}], "|", "g"}], "]"}], "\[Equal]", 
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Not]", "c"}], "&&", 
      RowBox[{"\[Not]", "x"}]}], "|", 
     RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.811774066965753*^9, 3.8119817785002193`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalFalsePositive", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Not]", "c"}], "\[And]", "x"}], "|", "g"}], "]"}], " ", 
    "\[Equal]", " ", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Not]", "c"}], "\[And]", "x"}], "|", 
      RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8117740688843336`*^9, 3.811774120038541*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Not]", "c"}], "&&", "x"}], "|", "g"}], "]"}], "\[Equal]", 
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Not]", "c"}], "&&", "x"}], "|", 
     RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.811774120812821*^9, 3.81198177968696*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalFalseNegative", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"c", "\[And]", 
       RowBox[{"\[Not]", "x"}]}], "|", "g"}], "]"}], " ", "\[Equal]", " ", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"c", "\[And]", 
       RowBox[{"\[Not]", "x"}]}], "|", 
      RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8117740968294907`*^9, 3.81177411316078*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{"c", "&&", 
      RowBox[{"\[Not]", "x"}]}], "|", "g"}], "]"}], "\[Equal]", 
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{"c", "&&", 
      RowBox[{"\[Not]", "x"}]}], "|", 
     RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.81177412845398*^9, 3.8119817807989235`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalTruePositiveRate", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"x", "|", 
      RowBox[{"c", "\[And]", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{"x", "|", 
      RowBox[{"c", "\[And]", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.811770046961975*^9, 3.8117701015587344`*^9}, {
   3.811770197616889*^9, 3.811770199107098*^9}, {3.8117704914029255`*^9, 
   3.8117706256958537`*^9}, {3.8117708169624524`*^9, 3.8117708362606134`*^9}, 
   3.811771683894929*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Pr", "[", 
    RowBox[{"x", "|", 
     RowBox[{"c", "&&", "g"}]}], "]"}], "\[Equal]", 
   RowBox[{"Pr", "[", 
    RowBox[{"x", "|", 
     RowBox[{"c", "&&", 
      RowBox[{"\[Not]", "g"}]}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8117705907884355`*^9, 3.8117706277462287`*^9, {3.8117708248561*^9, 
   3.811770838391163*^9}, 3.811771686472562*^9, 3.81198178184778*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalTrueNegativeRate", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"\[Not]", "x"}], "|", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "\[And]", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"\[Not]", "x"}], "|", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "\[And]", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8117706349476423`*^9, 3.8117706533221884`*^9}, {
   3.8117706862035446`*^9, 3.8117706902258797`*^9}, 3.8117716895510035`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{"\[Not]", "x"}], "|", 
     RowBox[{
      RowBox[{"\[Not]", "c"}], "&&", "g"}]}], "]"}], "\[Equal]", 
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{"\[Not]", "x"}], "|", 
     RowBox[{
      RowBox[{"\[Not]", "c"}], "&&", 
      RowBox[{"\[Not]", "g"}]}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.811770692644548*^9, 3.8117716901414485`*^9, 
  3.811981782932042*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalPositivePredictiveValue", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x", "\[And]", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x", "\[And]", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.811770698242859*^9, 3.8117707488935537`*^9}, {
  3.8117716926420207`*^9, 3.81177170087998*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Pr", "[", 
    RowBox[{"c", "|", 
     RowBox[{"x", "&&", "g"}]}], "]"}], "\[Equal]", 
   RowBox[{"Pr", "[", 
    RowBox[{"c", "|", 
     RowBox[{"x", "&&", 
      RowBox[{"\[Not]", "g"}]}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.811770767283778*^9, 3.8117717016583323`*^9, 
  3.8119815583423414`*^9, 3.8119817839462337`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalNegativePredictiveValue", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"\[Not]", "c"}], "|", 
      RowBox[{
       RowBox[{"\[Not]", "x"}], "\[And]", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"\[Not]", "c"}], "|", 
      RowBox[{
       RowBox[{"\[Not]", "x"}], "\[And]", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8117707699130063`*^9, 3.81177079938127*^9}, 
   3.8117717060860915`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{"\[Not]", "c"}], "|", 
     RowBox[{
      RowBox[{"\[Not]", "x"}], "&&", "g"}]}], "]"}], "\[Equal]", 
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{"\[Not]", "c"}], "|", 
     RowBox[{
      RowBox[{"\[Not]", "x"}], "&&", 
      RowBox[{"\[Not]", "g"}]}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.811770801315531*^9, 3.8117717067842245`*^9, 
  3.811981784922617*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"calibration2", " ", "=", " ", 
  RowBox[{
  "equalPositivePredictiveValue", "\[Union]", 
   "equalNegativePredictiveValue"}]}]], "Input",
 CellChangeTimes->{{3.811774400408059*^9, 3.8117744361323595`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x", "&&", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x", "&&", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"\[Not]", "c"}], "|", 
      RowBox[{
       RowBox[{"\[Not]", "x"}], "&&", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"\[Not]", "c"}], "|", 
      RowBox[{
       RowBox[{"\[Not]", "x"}], "&&", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8117744376385837`*^9, 3.811981785907898*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalAccuracy", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"c", "\[And]", "x"}], ")"}], "\[Or]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", 
         RowBox[{"\[Not]", "x"}]}], ")"}]}], "|", "g"}], "]"}], "\[Equal]", 
    " ", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"c", "\[And]", "x"}], ")"}], "\[Or]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", 
         RowBox[{"\[Not]", "x"}]}], ")"}]}], "|", 
      RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.811770806035985*^9, 3.8117708095587173`*^9}, {
  3.8117708492961426`*^9, 3.8117710038795247`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"c", "&&", "x"}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Not]", "c"}], "&&", 
        RowBox[{"\[Not]", "x"}]}], ")"}]}], "|", "g"}], "]"}], "\[Equal]", 
   RowBox[{"Pr", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"c", "&&", "x"}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Not]", "c"}], "&&", 
        RowBox[{"\[Not]", "x"}]}], ")"}]}], "|", 
     RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8117710044761333`*^9, 3.811981786863784*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalRatioOfTruePositiveRateToTrueNegativeRate", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"x", "|", 
       RowBox[{"c", "\[And]", "g"}]}], "]"}], "/", 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "x"}], "|", 
       RowBox[{
        RowBox[{"\[Not]", "c"}], "\[And]", "g"}]}], "]"}]}], "\[Equal]", " ", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"x", "|", 
       RowBox[{"c", "\[And]", 
        RowBox[{"\[Not]", "g"}]}]}], "]"}], "/", 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "x"}], "|", 
       RowBox[{
        RowBox[{"\[Not]", "c"}], "\[And]", 
        RowBox[{"\[Not]", "g"}]}]}], "]"}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.811771264032363*^9, 3.811771283351522*^9}, {
  3.811771565960518*^9, 3.811771632157492*^9}, {3.811771711025179*^9, 
  3.8117717157044764`*^9}, {3.8117718834078083`*^9, 3.8117719670419197`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "&&", "g"}], "]"}], " ", 
     RowBox[{"Pr", "[", 
      RowBox[{"x", "&&", "c", "&&", "g"}], "]"}]}], 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", "g"}], "]"}], " ", 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "x"}], "&&", 
       RowBox[{"\[Not]", "c"}], "&&", "g"}], "]"}]}]], "\[Equal]", 
   FractionBox[
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}], " ", 
     RowBox[{"Pr", "[", 
      RowBox[{"x", "&&", "c", "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}]}], 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}], " ", 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "x"}], "&&", 
       RowBox[{"\[Not]", "c"}], "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}]}]]}], "}"}]], "Output",
 CellChangeTimes->{3.8117720031331687`*^9, 3.811981787928317*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalRatioOfPredictedPositiveToActualPositive", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"x", "|", "g"}], "]"}], " ", "/", " ", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", "g"}], "]"}]}], " ", "\[Equal]", " ", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"x", "|", 
       RowBox[{"\[Not]", "g"}]}], "]"}], " ", "/", " ", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{"\[Not]", "g"}]}], "]"}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8117721497820325`*^9, 3.8117722570574284`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{"Pr", "[", 
     RowBox[{"x", "&&", "g"}], "]"}], 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "&&", "g"}], "]"}]], "\[Equal]", 
   FractionBox[
    RowBox[{"Pr", "[", 
     RowBox[{"x", "&&", 
      RowBox[{"\[Not]", "g"}]}], "]"}], 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "&&", 
      RowBox[{"\[Not]", "g"}]}], "]"}]]}], "}"}]], "Output",
 CellChangeTimes->{3.8117722676182775`*^9, 3.8119817891118264`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"statisticalParity", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"x", "|", "g"}], "]"}], " ", "\[Equal]", " ", 
    RowBox[{"Pr", "[", 
     RowBox[{"x", "|", 
      RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.811772275361936*^9, 3.811772325960469*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Pr", "[", 
    RowBox[{"x", "|", "g"}], "]"}], "\[Equal]", 
   RowBox[{"Pr", "[", 
    RowBox[{"x", "|", 
     RowBox[{"\[Not]", "g"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8117723268667564`*^9, 3.81198179052894*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"equalF1Score", " ", "=", " ", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"2", "*", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"c", "\[And]", "x"}], "|", "g"}], "]"}], " ", "/", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", "*", 
         RowBox[{"Pr", "[", 
          RowBox[{
           RowBox[{"c", "\[And]", "x"}], "|", "g"}], "]"}]}], " ", "+", " ", 
        RowBox[{"Pr", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"\[Not]", "c"}], "\[And]", "x"}], "|", "g"}], "]"}], " ", 
        "+", " ", 
        RowBox[{"Pr", "[", 
         RowBox[{
          RowBox[{"c", "\[And]", 
           RowBox[{"\[Not]", "x"}]}], "|", "g"}], "]"}]}], ")"}]}]}], " ", 
    "\[IndentingNewLine]", "\[Equal]", " ", 
    RowBox[{"2", "*", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"c", "\[And]", "x"}], "|", 
        RowBox[{"\[Not]", "g"}]}], "]"}], " ", "/", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", "*", 
         RowBox[{"Pr", "[", 
          RowBox[{
           RowBox[{"c", "\[And]", "x"}], "|", 
           RowBox[{"\[Not]", "g"}]}], "]"}]}], " ", "+", " ", 
        RowBox[{"Pr", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"\[Not]", "c"}], "\[And]", "x"}], "|", 
          RowBox[{"\[Not]", "g"}]}], "]"}], " ", "+", " ", 
        RowBox[{"Pr", "[", 
         RowBox[{
          RowBox[{"c", "\[And]", 
           RowBox[{"\[Not]", "x"}]}], "|", 
          RowBox[{"\[Not]", "g"}]}], "]"}]}], ")"}]}]}]}], 
   "\[IndentingNewLine]", "}"}]}]], "Input",
 CellChangeTimes->{{3.8117733340022993`*^9, 3.8117733417351885`*^9}, {
  3.811773380841888*^9, 3.8117735666839848`*^9}, {3.811978496969285*^9, 
  3.8119785026702404`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{"2", " ", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", "x", "&&", "g"}], "]"}]}], 
    RowBox[{
     RowBox[{"Pr", "[", "g", "]"}], " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{"2", " ", 
         RowBox[{"Pr", "[", 
          RowBox[{"c", "&&", "x", "&&", "g"}], "]"}]}], 
        RowBox[{"Pr", "[", "g", "]"}]], "+", 
       RowBox[{"Pr", "[", 
        RowBox[{
         RowBox[{"c", "&&", 
          RowBox[{"\[Not]", "x"}]}], "|", "g"}], "]"}], "+", 
       RowBox[{"Pr", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"\[Not]", "c"}], "&&", "x"}], "|", "g"}], "]"}]}], ")"}]}]],
    "\[Equal]", 
   FractionBox[
    RowBox[{"2", " ", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", "x", "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{"2", " ", 
         RowBox[{"Pr", "[", 
          RowBox[{"c", "&&", "x", "&&", 
           RowBox[{"\[Not]", "g"}]}], "]"}]}], 
        RowBox[{"Pr", "[", 
         RowBox[{"\[Not]", "g"}], "]"}]], "+", 
       RowBox[{"Pr", "[", 
        RowBox[{
         RowBox[{"c", "&&", 
          RowBox[{"\[Not]", "x"}]}], "|", 
         RowBox[{"\[Not]", "g"}]}], "]"}], "+", 
       RowBox[{"Pr", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"\[Not]", "c"}], "&&", "x"}], "|", 
         RowBox[{"\[Not]", "g"}]}], "]"}]}], ")"}], " ", 
     RowBox[{"Pr", "[", 
      RowBox[{"\[Not]", "g"}], "]"}]}]]}], "}"}]], "Output",
 CellChangeTimes->{3.8117735680173407`*^9, 3.811978503599464*^9, 
  3.8119817918605876`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nonConstantPrediction", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"Pr", "[", "x", "]"}], "\[NotEqual]", "0"}], " ", "\[And]", 
    RowBox[{
     RowBox[{"Pr", "[", "x", "]"}], "\[NotEqual]", "1"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.811977859310291*^9, 3.8119778811860013`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"Pr", "[", "x", "]"}], "\[NotEqual]", "0"}], "&&", 
   RowBox[{
    RowBox[{"Pr", "[", "x", "]"}], "\[NotEqual]", "1"}]}], "}"}]], "Output",
 CellChangeTimes->{3.811977887335397*^9, 3.811981793550701*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3.3. Specific to risk assignment with four fixed scores", "Subsection",
 CellChangeTimes->{{3.811777482525669*^9, 3.8117774865394635`*^9}, {
  3.811963492726308*^9, 3.811963497669307*^9}, {3.811977834221953*^9, 
  3.8119778397097316`*^9}, {3.81197811213267*^9, 3.811978112459423*^9}, {
  3.8119781905411024`*^9, 3.8119781907099447`*^9}, {3.8119782433490524`*^9, 
  3.8119782466760497`*^9}, {3.8119817503279686`*^9, 3.811981750422057*^9}}],

Cell["\<\
NB: Re-evaluate all cells in this subsection if you change any of s1, s2, s3, \
s4.\
\>", "Text",
 CellChangeTimes->{{3.8117794382085686`*^9, 3.8117794474619007`*^9}, {
  3.8117806113018875`*^9, 3.8117806166696997`*^9}, {3.811978011686061*^9, 
  3.811978012453743*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"s1", " ", "=", " ", "0.2"}], ";", " ", 
  RowBox[{"s2", " ", "=", " ", "0.4"}], ";", " ", 
  RowBox[{"s3", "=", "0.6"}], ";", " ", 
  RowBox[{"s4", "=", "0.8", " "}]}]], "Input",
 CellChangeTimes->{{3.811775023863839*^9, 3.8117750594071965`*^9}, {
  3.8117751736823425`*^9, 3.811775222208806*^9}, {3.811775284520915*^9, 
  3.8117753247505693`*^9}, {3.811862818670279*^9, 3.81186285048345*^9}}],

Cell[BoxData["0.8`"], "Output",
 CellChangeTimes->{
  3.811775286900028*^9, 3.811775325616725*^9, {3.8118628225721245`*^9, 
   3.8118628530201755`*^9}, 3.8119817984373827`*^9}]
}, Open  ]],

Cell["\<\
Weak calibration says that the positive predictive values for each score are \
equal across groups.\
\>", "Text",
 CellChangeTimes->{{3.811977910444332*^9, 3.8119779567009983`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"weakCalibration4", " ", "=", " ", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{"x1", "\[And]", "x2", "\[And]", "g"}]}], "]"}], "\[Equal]", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{"x1", "\[And]", "x2", "\[And]", 
        RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{"x1", "\[And]", 
        RowBox[{"\[Not]", "x2"}], "\[And]", "g"}]}], "]"}], "\[Equal]", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{"x1", "\[And]", 
        RowBox[{"\[Not]", "x2"}], "\[And]", 
        RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", "x2", "\[And]", "g"}]}], "]"}], 
     "\[Equal]", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", "x2", "\[And]", 
        RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", 
        RowBox[{"\[Not]", "x2"}], "\[And]", "g"}]}], "]"}], "\[Equal]", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", 
        RowBox[{"\[Not]", "x2"}], "\[And]", 
        RowBox[{"\[Not]", "g"}]}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.8117744660852947`*^9, 3.811774478253394*^9}, {
  3.8117745398595295`*^9, 3.811774654794709*^9}, {3.8117746900778008`*^9, 
  3.8117747341841288`*^9}, {3.8117753045503516`*^9, 3.811775307694357*^9}, {
  3.811978472640874*^9, 3.8119784790075684`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x1", "&&", "x2", "&&", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x1", "&&", "x2", "&&", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x1", "&&", 
       RowBox[{"\[Not]", "x2"}], "&&", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x1", "&&", 
       RowBox[{"\[Not]", "x2"}], "&&", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", "x2", "&&", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", "x2", "&&", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", 
       RowBox[{"\[Not]", "x2"}], "&&", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", 
       RowBox[{"\[Not]", "x2"}], "&&", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8117747349749985`*^9, {3.8119784762252636`*^9, 3.8119784828468695`*^9}, 
   3.8119818017642026`*^9}]
}, Open  ]],

Cell["\<\
Strong calibration adds that each score equals its positive predictive value \
in each group.\
\>", "Text",
 CellChangeTimes->{{3.811977929861163*^9, 3.8119779966934958`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"strongCalibration4", " ", "=", " ", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{"x1", "\[And]", "x2", "\[And]", "g"}]}], "]"}], "\[Equal]", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{"x1", "\[And]", "x2", "\[And]", 
        RowBox[{"\[Not]", "g"}]}]}], "]"}], "\[Equal]", "s1"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{"x1", "\[And]", 
        RowBox[{"\[Not]", "x2"}], "\[And]", "g"}]}], "]"}], "\[Equal]", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{"x1", "\[And]", 
        RowBox[{"\[Not]", "x2"}], "\[And]", 
        RowBox[{"\[Not]", "g"}]}]}], "]"}], " ", "\[Equal]", " ", "s2"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", "x2", "\[And]", "g"}]}], "]"}], 
     "\[Equal]", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", "x2", "\[And]", 
        RowBox[{"\[Not]", "g"}]}]}], "]"}], "\[Equal]", "s3"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", 
        RowBox[{"\[Not]", "x2"}], "\[And]", "g"}]}], "]"}], "\[Equal]", 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "|", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", 
        RowBox[{"\[Not]", "x2"}], "\[And]", 
        RowBox[{"\[Not]", "g"}]}]}], "]"}], "\[Equal]", "s4"}]}], 
   "\[IndentingNewLine]", "}"}]}]], "Input",
 CellChangeTimes->{
  3.811774919521762*^9, {3.8117753515258603`*^9, 3.811775448044482*^9}, 
   3.8119783574385166`*^9, 3.811978460454671*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x1", "&&", "x2", "&&", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x1", "&&", "x2", "&&", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}], "\[Equal]", "0.2`"}], ",", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x1", "&&", 
       RowBox[{"\[Not]", "x2"}], "&&", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{"x1", "&&", 
       RowBox[{"\[Not]", "x2"}], "&&", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}], "\[Equal]", "0.4`"}], ",", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", "x2", "&&", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", "x2", "&&", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}], "\[Equal]", "0.6`"}], ",", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", 
       RowBox[{"\[Not]", "x2"}], "&&", "g"}]}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{"c", "|", 
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", 
       RowBox[{"\[Not]", "x2"}], "&&", 
       RowBox[{"\[Not]", "g"}]}]}], "]"}], "\[Equal]", "0.8`"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.81177546859647*^9, 3.8119783644155965`*^9, 
  3.8119784612193365`*^9, 3.8119818053283153`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"positiveBalance4", " ", "=", " ", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"s1", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"x1", "\[And]", "x2"}], "|", 
        RowBox[{"c", "\[And]", "g"}]}], "]"}]}], "+", " ", 
     RowBox[{"s2", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"x1", "\[And]", 
         RowBox[{"\[Not]", "x2"}]}], "|", 
        RowBox[{"c", "\[And]", "g"}]}], "]"}]}], " ", "+", " ", 
     RowBox[{"s3", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", "x2"}], "|", 
        RowBox[{"c", "\[And]", "g"}]}], "]"}]}], " ", "+", " ", 
     RowBox[{"s4", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", 
         RowBox[{"\[Not]", "x2"}]}], "|", 
        RowBox[{"c", "\[And]", "g"}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "\[Equal]", " ", 
    RowBox[{
     RowBox[{"s1", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"x1", "\[And]", "x2"}], "|", 
        RowBox[{"c", "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}], " ", "+", " ", 
     RowBox[{"s2", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"x1", "\[And]", 
         RowBox[{"\[Not]", "x2"}]}], "|", 
        RowBox[{"c", "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}], " ", "+", " ", 
     RowBox[{"s3", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", "x2"}], "|", 
        RowBox[{"c", "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}], " ", "+", " ", 
     RowBox[{"s4", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", 
         RowBox[{"\[Not]", "x2"}]}], "|", 
        RowBox[{"c", "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.8117747920750585`*^9, 3.811774797638464*^9}, {
  3.8117754918779144`*^9, 3.811775493773589*^9}, {3.811777690154907*^9, 
  3.811777748001588*^9}, {3.8117777881161566`*^9, 3.8117778588938804`*^9}, {
  3.811978376014618*^9, 3.8119784024546213`*^9}, {3.8119784514094753`*^9, 
  3.811978454191617*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"0.2`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"x1", "&&", "x2", "&&", "c", "&&", "g"}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", "g"}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.4`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"x1", "&&", 
        RowBox[{"\[Not]", "x2"}], "&&", "c", "&&", "g"}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", "g"}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.6`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "&&", "x2", "&&", "c", "&&", "g"}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", "g"}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.8`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "&&", 
        RowBox[{"\[Not]", "x2"}], "&&", "c", "&&", "g"}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", "g"}], "]"}]]}], "\[Equal]", 
   RowBox[{
    FractionBox[
     RowBox[{"0.2`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"x1", "&&", "x2", "&&", "c", "&&", 
        RowBox[{"\[Not]", "g"}]}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.4`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"x1", "&&", 
        RowBox[{"\[Not]", "x2"}], "&&", "c", "&&", 
        RowBox[{"\[Not]", "g"}]}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.6`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "&&", "x2", "&&", "c", "&&", 
        RowBox[{"\[Not]", "g"}]}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.8`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "&&", 
        RowBox[{"\[Not]", "x2"}], "&&", "c", "&&", 
        RowBox[{"\[Not]", "g"}]}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{"c", "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}]]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.811777860147073*^9, {3.8119783864159284`*^9, 3.8119784093446445`*^9}, 
   3.8119784548799553`*^9, 3.8119818081997566`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"negativeBalance4", " ", "=", " ", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"s1", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"x1", "\[And]", "x2"}], "|", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", "g"}]}], "]"}]}], " ", "+", " ", 
     RowBox[{"s2", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"x1", "\[And]", 
         RowBox[{"\[Not]", "x2"}]}], "|", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", "g"}]}], "]"}]}], " ", "+", " ", 
     RowBox[{"s3", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", "x2"}], "|", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", "g"}]}], "]"}]}], " ", "+", " ", 
     RowBox[{"s4", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", 
         RowBox[{"\[Not]", "x2"}]}], "|", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", "g"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "\[Equal]", " ", 
    RowBox[{
     RowBox[{"s1", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"x1", "\[And]", "x2"}], "|", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}], " ", "+", " ", 
     RowBox[{"s2", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"x1", "\[And]", 
         RowBox[{"\[Not]", "x2"}]}], "|", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}], " ", "+", " ", 
     RowBox[{"s3", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", "x2"}], "|", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}], " ", "+", " ", 
     RowBox[{"s4", "*", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", 
         RowBox[{"\[Not]", "x2"}]}], "|", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.8117778778182116`*^9, 3.8117779269723682`*^9}, {
  3.811978444633095*^9, 3.8119784471019754`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"0.2`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"x1", "&&", "x2", "&&", 
        RowBox[{"\[Not]", "c"}], "&&", "g"}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "&&", "g"}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.4`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"x1", "&&", 
        RowBox[{"\[Not]", "x2"}], "&&", 
        RowBox[{"\[Not]", "c"}], "&&", "g"}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "&&", "g"}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.6`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "&&", "x2", "&&", 
        RowBox[{"\[Not]", "c"}], "&&", "g"}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "&&", "g"}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.8`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "&&", 
        RowBox[{"\[Not]", "x2"}], "&&", 
        RowBox[{"\[Not]", "c"}], "&&", "g"}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "&&", "g"}], "]"}]]}], "\[Equal]", 
   RowBox[{
    FractionBox[
     RowBox[{"0.2`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"x1", "&&", "x2", "&&", 
        RowBox[{"\[Not]", "c"}], "&&", 
        RowBox[{"\[Not]", "g"}]}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.4`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"x1", "&&", 
        RowBox[{"\[Not]", "x2"}], "&&", 
        RowBox[{"\[Not]", "c"}], "&&", 
        RowBox[{"\[Not]", "g"}]}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.6`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "&&", "x2", "&&", 
        RowBox[{"\[Not]", "c"}], "&&", 
        RowBox[{"\[Not]", "g"}]}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}]], "+", 
    FractionBox[
     RowBox[{"0.8`", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "&&", 
        RowBox[{"\[Not]", "x2"}], "&&", 
        RowBox[{"\[Not]", "c"}], "&&", 
        RowBox[{"\[Not]", "g"}]}], "]"}]}], 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"\[Not]", "c"}], "&&", 
       RowBox[{"\[Not]", "g"}]}], "]"}]]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8117779299009066`*^9, 3.811981812474619*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"statisticalParity4", " ", "=", " ", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"x1", "\[And]", "x2"}], "|", "g"}], "]"}], " ", "\[Equal]", 
     " ", 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"x1", "\[And]", "x2"}], "|", 
       RowBox[{"\[Not]", "g"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"x1", "\[And]", 
        RowBox[{"\[Not]", "x2"}]}], "|", "g"}], "]"}], " ", "\[Equal]", " ", 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"x1", "\[And]", 
        RowBox[{"\[Not]", "x2"}]}], "|", 
       RowBox[{"\[Not]", "g"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", "x2"}], "|", "g"}], "]"}], " ", 
     "\[Equal]", " ", 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", "x2"}], "|", 
       RowBox[{"\[Not]", "g"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", 
        RowBox[{"\[Not]", "x2"}]}], "|", "g"}], "]"}], " ", "\[Equal]", " ", 
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Not]", "x1"}], "\[And]", 
        RowBox[{"\[Not]", "x2"}]}], "|", 
       RowBox[{"\[Not]", "g"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.8119782820339503`*^9, 3.811978351309456*^9}, {
  3.811978423896021*^9, 3.811978436119175*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"x1", "&&", "x2"}], "|", "g"}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"x1", "&&", "x2"}], "|", 
      RowBox[{"\[Not]", "g"}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"x1", "&&", 
       RowBox[{"\[Not]", "x2"}]}], "|", "g"}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"x1", "&&", 
       RowBox[{"\[Not]", "x2"}]}], "|", 
      RowBox[{"\[Not]", "g"}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", "x2"}], "|", "g"}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", "x2"}], "|", 
      RowBox[{"\[Not]", "g"}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", 
       RowBox[{"\[Not]", "x2"}]}], "|", "g"}], "]"}], "\[Equal]", 
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Not]", "x1"}], "&&", 
       RowBox[{"\[Not]", "x2"}]}], "|", 
      RowBox[{"\[Not]", "g"}]}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8119784389034123`*^9, 3.811981814991074*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["3.4 Proxies for non-confusion constraints", \
"Subsection"]], "Section",
 CellChangeTimes->{{3.8117755030133867`*^9, 3.8117755075869055`*^9}, {
  3.8119635043828354`*^9, 3.8119635066761746`*^9}, {3.811978033142219*^9, 
  3.811978035332021*^9}, {3.811978118780923*^9, 3.8119781191332064`*^9}, {
  3.8119781956531734`*^9, 3.811978195757141*^9}, {3.8119817557119265`*^9, 
  3.811981755821498*^9}}],

Cell["\<\
A proxy for a prediction problem not admitting perfect prediction:\
\>", "Text",
 CellChangeTimes->{{3.8117794011205177`*^9, 3.8117794148405113`*^9}, {
  3.8119780409165764`*^9, 3.8119780624452343`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"notPerfectPrediction", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"c", "\[And]", "x"}], ")"}], "\[Or]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", 
         RowBox[{"\[Not]", "x"}]}], ")"}]}], "]"}], "\[NotEqual]", " ", "1"}],
     " ", "\[And]", 
    RowBox[{
     RowBox[{"Pr", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"c", "\[And]", 
         RowBox[{"\[Not]", "x"}]}], ")"}], "\[Or]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "\[And]", "x"}], ")"}]}], "]"}], 
     "\[NotEqual]", " ", "1"}]}], "}"}], " "}]], "Input",
 CellChangeTimes->{{3.76890980522486*^9, 3.7689098073466463`*^9}, {
   3.768909842066475*^9, 3.7689098500707817`*^9}, {3.770298112229602*^9, 
   3.7702981384508514`*^9}, {3.811772447440058*^9, 3.8117724650569286`*^9}, 
   3.811772578747997*^9, {3.8117782793676414`*^9, 3.811778327260419*^9}, {
   3.811778370613889*^9, 3.811778408733139*^9}, {3.8117792485786524`*^9, 
   3.8117792549628086`*^9}, {3.8117792966741548`*^9, 3.811779352819377*^9}, 
   3.811779386067311*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"c", "&&", "x"}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Not]", "c"}], "&&", 
        RowBox[{"\[Not]", "x"}]}], ")"}]}], "]"}], "\[NotEqual]", "1"}], "&&", 
   RowBox[{
    RowBox[{"Pr", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"c", "&&", 
        RowBox[{"\[Not]", "x"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Not]", "c"}], "&&", "x"}], ")"}]}], "]"}], "\[NotEqual]", 
    "1"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8117784140755644`*^9, 3.8117793221812296`*^9, 
  3.8119818200847883`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4. PrSAT in action", "Section",
 CellChangeTimes->{{3.8117779935806646`*^9, 3.811778000451251*^9}, {
  3.81197812405383*^9, 3.8119781243199787`*^9}, {3.8119781995231724`*^9, 
  3.8119781996531153`*^9}, {3.8119811116894846`*^9, 3.8119811117794304`*^9}, {
  3.8119817576978207`*^9, 3.811981757914245*^9}}],

Cell["\<\
Here PrSAT verifies a version of Chouldechova\[CloseCurlyQuote]s \
impossibility result:\
\>", "Text",
 CellChangeTimes->{{3.811981152822183*^9, 3.8119811838805857`*^9}, {
  3.81198183747953*^9, 3.811981842168957*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M1", " ", "=", " ", 
  RowBox[{"PrSAT", "[", 
   RowBox[{
   "equalPositivePredictiveValue", "\[Union]", "equalNegativePredictiveValue",
     "\[Union]", "equalTruePositiveRate", "\[Union]", "equalTrueNegativeRate",
     "\[Union]", "notPerfectPrediction", "\[Union]", "unequalBaseRates"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.811778034708603*^9, 3.8117781345923457`*^9}}],

Cell[BoxData[
 TemplateBox[{
  "PrSAT","srchfail","\"Search phase failed; attempting FindInstance\"",2,27,
   1,29081243085678690139,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8117793277101164`*^9, 3.8119815396237793`*^9, 
  3.8119818273855996`*^9}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.8117781460488462`*^9, 3.811778425357624*^9, 
  3.811779327906592*^9, 3.8119815396762075`*^9, 3.8119818276388903`*^9}]
}, Open  ]],

Cell[TextData[{
 "Note that you ",
 StyleBox["can",
  FontSlant->"Italic"],
 " satisfy any three of the four conditions, even when the prediction problem \
has different base rates and doesn\[CloseCurlyQuote]t admit perfect \
prediction. For example:"
}], "Text",
 CellChangeTimes->{
  3.8117796009758368`*^9, {3.8119812044733534`*^9, 3.811981209751109*^9}, {
   3.8119812881601524`*^9, 3.811981290320193*^9}, {3.8119818927452073`*^9, 
   3.811981898591704*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"M2", " ", "=", " ", 
   RowBox[{"PrSAT", "[", 
    RowBox[{
    "equalPositivePredictiveValue", "\[Union]", 
     "equalNegativePredictiveValue", "\[Union]", "equalTruePositiveRate", 
     "\[Union]", "notPerfectPrediction", "\[Union]", "unequalBaseRates"}], 
    "]"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8117796108531456`*^9, 3.811779659502062*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"c", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"g", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"x", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "4"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"\[CapitalOmega]", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "1"], ",", 
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "4"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "1"], "\[Rule]", 
      FractionBox["2734577", "9758210"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "2"], "\[Rule]", "0"}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "3"], "\[Rule]", 
      FractionBox["1", "1254"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "4"], "\[Rule]", 
      FractionBox["2", "45"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "5"], "\[Rule]", "0"}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "6"], "\[Rule]", 
      FractionBox["23", "63"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "7"], "\[Rule]", 
      FractionBox["112", "3335"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "8"], "\[Rule]", 
      FractionBox["8", "29"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8117796639378138`*^9, {3.81177970846988*^9, 3.8117797156879873`*^9}, 
   3.811981851212121*^9}]
}, Open  ]],

Cell["PrSAT lets us display the distribution more clearly:", "Text",
 CellChangeTimes->{{3.8119813952849283`*^9, 3.8119814105762625`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TruthTable", "[", "M2", "]"}]], "Input",
 CellChangeTimes->{{3.811779678897605*^9, 3.811779681580017*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"c", "g", "x", "\<\"var\"\>", "\<\"Pr\"\>"},
    {"T", "T", "T", 
     SubscriptBox["\[DoubleStruckA]", "8"], 
     FractionBox["8", "29"]},
    {"T", "T", "F", 
     SubscriptBox["\[DoubleStruckA]", "5"], "0"},
    {"T", "F", "T", 
     SubscriptBox["\[DoubleStruckA]", "6"], 
     FractionBox["23", "63"]},
    {"T", "F", "F", 
     SubscriptBox["\[DoubleStruckA]", "2"], "0"},
    {"F", "T", "T", 
     SubscriptBox["\[DoubleStruckA]", "7"], 
     FractionBox["112", "3335"]},
    {"F", "T", "F", 
     SubscriptBox["\[DoubleStruckA]", "3"], 
     FractionBox["1", "1254"]},
    {"F", "F", "T", 
     SubscriptBox["\[DoubleStruckA]", "4"], 
     FractionBox["2", "45"]},
    {"F", "F", "F", 
     SubscriptBox["\[DoubleStruckA]", "1"], 
     FractionBox["2734577", "9758210"]}
   },
   AutoDelete->False,
   GridBoxDividers->{
    "Columns" -> {False, {True}, False}, "Rows" -> {False, {True}, False}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.811779682275803*^9, 3.8119818569450655`*^9}]
}, Open  ]],

Cell["\<\
But you can\[CloseCurlyQuote]t satisfy even three of the four conditions with \
all probabilities positive, assuming the prediction problem has different \
base rates and doesn\[CloseCurlyQuote]t admit perfect prediction:\
\>", "Text",
 CellChangeTimes->{{3.8119814375493417`*^9, 3.8119814603127527`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M3", " ", "=", " ", 
  RowBox[{"PrSAT", "[", 
   RowBox[{
    RowBox[{
    "equalNegativePredictiveValue", "\[Union]", 
     "equalPositivePredictiveValue", "\[Union]", "equalTruePositiveRate", 
     "\[Union]", "notPerfectPrediction", "\[Union]", "unequalBaseRates"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"Probabilities", "\[Rule]", "Regular"}]}], " ", "]"}]}]], "Input",
 CellChangeTimes->{{3.8119814739448977`*^9, 3.811981506168666*^9}, {
  3.8119819196547318`*^9, 3.8119819909347453`*^9}}],

Cell[BoxData[
 TemplateBox[{
  "PrSAT","srchfail","\"Search phase failed; attempting FindInstance\"",2,32,
   2,29081243085678690139,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.811981997078478*^9}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.8119815081555576`*^9, 3.8119818674163327`*^9, 
  3.81198195748417*^9, 3.8119819971762133`*^9}]
}, Open  ]],

Cell["\<\
Here PrSAT generates a model which yields data similar to what worried \
ProPublica with COMPAS:\
\>", "Text",
 CellChangeTimes->{{3.8119820186260786`*^9, 3.8119820242658577`*^9}, {
  3.811983428708995*^9, 3.8119834352788715`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M4", " ", "=", " ", 
  RowBox[{"PrSAT", "[", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "x"}], "|", 
        RowBox[{"b", "\[And]", "c"}]}], "]"}], "\[Equal]", ".235"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"x", "|", 
        RowBox[{
         RowBox[{"\[Not]", "b"}], "\[And]", "c"}]}], "]"}], "\[Equal]", 
      ".477"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{
        RowBox[{"\[Not]", "x"}], "|", 
        RowBox[{"b", "\[And]", 
         RowBox[{"\[Not]", "c"}]}]}], "]"}], "\[Equal]", ".449"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"x", "|", 
        RowBox[{
         RowBox[{"\[Not]", "b"}], "\[And]", 
         RowBox[{"\[Not]", "c"}]}]}], "]"}], "\[Equal]", ".280"}]}], 
    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"b", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"c", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"x", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "4"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"\[CapitalOmega]", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "1"], ",", 
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "4"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "1"], "\[Rule]", 
      "0.17940199335548174`"}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "2"], "\[Rule]", 
      FractionBox["8", "71"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "3"], "\[Rule]", 
      FractionBox["3", "23"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "4"], "\[Rule]", 
      FractionBox["3", "43"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "5"], "\[Rule]", 
      "0.05886382797721798`"}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "6"], "\[Rule]", 
      "0.13827284419210137`"}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "7"], "\[Rule]", 
      "0.11896250727408761`"}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "8"], "\[Rule]", 
      "0.1916205463939223`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8119820422588725`*^9}]
}, Open  ]],

Cell["\<\
Here is a case where it\[CloseCurlyQuote]s not clear which group, if either, \
the strategy is biased against:\
\>", "Text",
 CellChangeTimes->{{3.811982081747506*^9, 3.811982117688272*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M5", " ", "=", " ", 
  RowBox[{"PrSAT", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Pr", "[", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "|", 
         RowBox[{"x", "\[And]", "g"}]}], "]"}], " ", "<", " ", 
       RowBox[{"Pr", "[", 
        RowBox[{
         RowBox[{"\[Not]", "c"}], "|", 
         RowBox[{"x", "\[And]", 
          RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Pr", "[", 
        RowBox[{"c", "|", 
         RowBox[{
          RowBox[{"\[Not]", "x"}], "\[And]", "g"}]}], "]"}], " ", "<", " ", 
       RowBox[{"Pr", "[", 
        RowBox[{"c", "|", 
         RowBox[{
          RowBox[{"\[Not]", "x"}], "\[And]", 
          RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Pr", "[", 
        RowBox[{
         RowBox[{"\[Not]", "x"}], "|", 
         RowBox[{"c", "\[And]", "g"}]}], "]"}], " ", "<", " ", 
       RowBox[{"Pr", "[", 
        RowBox[{
         RowBox[{"\[Not]", "x"}], "|", 
         RowBox[{"c", "\[And]", 
          RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Pr", "[", 
        RowBox[{
         RowBox[{"\[Not]", "x"}], "|", 
         RowBox[{"c", "\[And]", "g"}]}], "]"}], " ", "<", " ", 
       RowBox[{"Pr", "[", 
        RowBox[{
         RowBox[{"\[Not]", "x"}], "|", 
         RowBox[{"c", "\[And]", 
          RowBox[{"\[Not]", "g"}]}]}], "]"}]}]}], "\[IndentingNewLine]", 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Probabilities", " ", "\[Rule]", " ", "Regular"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7689115582970605`*^9, 3.76891156950492*^9}, {
  3.7689116842963343`*^9, 3.768911772913034*^9}, {3.7689118168452797`*^9, 
  3.768911820751527*^9}, {3.768911883431554*^9, 3.768911886019183*^9}, {
  3.7689119234305067`*^9, 3.768911928666581*^9}, {3.8119821277312965`*^9, 
  3.8119821679947305`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"c", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"g", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"x", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "4"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"\[CapitalOmega]", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "1"], ",", 
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "4"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "1"], "\[Rule]", 
      FractionBox["12689", "7106220"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "2"], "\[Rule]", 
      FractionBox["14", "55"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "3"], "\[Rule]", 
      FractionBox["9", "37"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "4"], "\[Rule]", 
      FractionBox["24", "97"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "5"], "\[Rule]", 
      FractionBox["1", "999"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "6"], "\[Rule]", 
      FractionBox["1", "999"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "7"], "\[Rule]", 
      FractionBox["1", "999"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "8"], "\[Rule]", 
      FractionBox["1", "4"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7689118002102747`*^9, 3.7689118241418276`*^9}, 
   3.768911889548786*^9, 3.7689119319503503`*^9, 3.7689161384094076`*^9, 
   3.768916243019081*^9, 3.7697134750221643`*^9, 3.7697144072821813`*^9, 
   3.769804286401323*^9, {3.7699453999251947`*^9, 3.76994542429902*^9}, 
   3.7700603771720304`*^9, 3.7702980787006416`*^9, 3.7702983219178143`*^9, 
   3.770298793143443*^9, 3.770299239814884*^9, 3.8119821838090773`*^9}]
}, Open  ]],

Cell["\<\
Here we get weak calibration for both coarse scores but none of four fine \
scores:\
\>", "Text",
 CellChangeTimes->{{3.8119822097521334`*^9, 3.8119822230625343`*^9}, {
  3.8119822561832724`*^9, 3.8119822813671465`*^9}, {3.811982368511789*^9, 
  3.811982382358702*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M6", " ", "=", " ", 
  RowBox[{"PrSAT", "[", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{"x1", "\[And]", "g"}]}], "]"}], " ", "\[Equal]", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{"x1", "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", "g"}]}], "]"}], " ", "\[Equal]", 
      " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{"x1", "\[And]", "x2", "\[And]", "g"}]}], "]"}], " ", 
      "\[NotEqual]", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{"x1", "\[And]", "x2", "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", "x2", "\[And]", "g"}]}], "]"}], 
      " ", "\[NotEqual]", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", "x2", "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{"x1", "\[And]", 
         RowBox[{"\[Not]", "x2"}], "\[And]", "g"}]}], "]"}], " ", 
      "\[NotEqual]", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{"x1", "\[And]", 
         RowBox[{"\[Not]", "x2"}], "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", 
         RowBox[{"\[Not]", "x2"}], "\[And]", "g"}]}], "]"}], " ", 
      "\[NotEqual]", " ", 
      RowBox[{"Pr", "[", 
       RowBox[{"c", "|", 
        RowBox[{
         RowBox[{"\[Not]", "x1"}], "\[And]", 
         RowBox[{"\[Not]", "x2"}], "\[And]", 
         RowBox[{"\[Not]", "g"}]}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}],
    "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.8119823263095865`*^9, 3.811982365633943*^9}, 
   3.811982405635363*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"c", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"], ",", 
        SubscriptBox["\[DoubleStruckA]", "12"], ",", 
        SubscriptBox["\[DoubleStruckA]", "13"], ",", 
        SubscriptBox["\[DoubleStruckA]", "14"], ",", 
        SubscriptBox["\[DoubleStruckA]", "16"]}], "}"}]}], ",", 
     RowBox[{"g", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "9"], ",", 
        SubscriptBox["\[DoubleStruckA]", "10"], ",", 
        SubscriptBox["\[DoubleStruckA]", "12"], ",", 
        SubscriptBox["\[DoubleStruckA]", "13"], ",", 
        SubscriptBox["\[DoubleStruckA]", "15"], ",", 
        SubscriptBox["\[DoubleStruckA]", "16"]}], "}"}]}], ",", 
     RowBox[{"x1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "4"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "9"], ",", 
        SubscriptBox["\[DoubleStruckA]", "11"], ",", 
        SubscriptBox["\[DoubleStruckA]", "12"], ",", 
        SubscriptBox["\[DoubleStruckA]", "14"], ",", 
        SubscriptBox["\[DoubleStruckA]", "15"], ",", 
        SubscriptBox["\[DoubleStruckA]", "16"]}], "}"}]}], ",", 
     RowBox[{"x2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"], ",", 
        SubscriptBox["\[DoubleStruckA]", "10"], ",", 
        SubscriptBox["\[DoubleStruckA]", "11"], ",", 
        SubscriptBox["\[DoubleStruckA]", "13"], ",", 
        SubscriptBox["\[DoubleStruckA]", "14"], ",", 
        SubscriptBox["\[DoubleStruckA]", "15"], ",", 
        SubscriptBox["\[DoubleStruckA]", "16"]}], "}"}]}], ",", 
     RowBox[{"\[CapitalOmega]", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "1"], ",", 
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "4"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"], ",", 
        SubscriptBox["\[DoubleStruckA]", "9"], ",", 
        SubscriptBox["\[DoubleStruckA]", "10"], ",", 
        SubscriptBox["\[DoubleStruckA]", "11"], ",", 
        SubscriptBox["\[DoubleStruckA]", "12"], ",", 
        SubscriptBox["\[DoubleStruckA]", "13"], ",", 
        SubscriptBox["\[DoubleStruckA]", "14"], ",", 
        SubscriptBox["\[DoubleStruckA]", "15"], ",", 
        SubscriptBox["\[DoubleStruckA]", "16"]}], "}"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "1"], "\[Rule]", 
      FractionBox["2446373", "97924974"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "2"], "\[Rule]", 
      FractionBox["1", "19"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "3"], "\[Rule]", 
      FractionBox["2", "41"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "4"], "\[Rule]", 
      FractionBox["3", "32"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "5"], "\[Rule]", 
      FractionBox["1", "42"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "6"], "\[Rule]", 
      FractionBox["5", "54"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "7"], "\[Rule]", 
      FractionBox["3", "52"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "8"], "\[Rule]", 
      FractionBox["2", "41"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "9"], "\[Rule]", 
      FractionBox["1", "26"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "10"], "\[Rule]", 
      FractionBox["2", "39"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "11"], "\[Rule]", 
      FractionBox["1", "14"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "12"], "\[Rule]", 
      FractionBox["2", "47"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "13"], "\[Rule]", 
      FractionBox["3", "26"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "14"], "\[Rule]", 
      FractionBox["5", "33"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "15"], "\[Rule]", 
      FractionBox["77783320429733", "2198381196709152"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "16"], "\[Rule]", 
      FractionBox["3103651167277733", "60887307787426692"]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.811982412200718*^9}]
}, Open  ]],

Cell["\<\
We can easily check whether other combinations of fairness properties are \
satisfiable. For example:\
\>", "Text",
 CellChangeTimes->{{3.811982472004498*^9, 3.8119824884820805`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M7", " ", "=", " ", 
  RowBox[{"PrSAT", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "equalAccuracy", "\[Union]", "statisticalParity", "\[Union]", 
     "unequalBaseRates", "\[Union]", "notPerfectPrediction"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Probabilities", " ", "\[Rule]", " ", "Regular"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.8119825361171894`*^9, 3.8119825372044497`*^9}, {
  3.8119825841274843`*^9, 3.8119826013015165`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"c", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"g", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"x", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "4"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}], ",", 
     RowBox[{"\[CapitalOmega]", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[DoubleStruckA]", "1"], ",", 
        SubscriptBox["\[DoubleStruckA]", "2"], ",", 
        SubscriptBox["\[DoubleStruckA]", "3"], ",", 
        SubscriptBox["\[DoubleStruckA]", "4"], ",", 
        SubscriptBox["\[DoubleStruckA]", "5"], ",", 
        SubscriptBox["\[DoubleStruckA]", "6"], ",", 
        SubscriptBox["\[DoubleStruckA]", "7"], ",", 
        SubscriptBox["\[DoubleStruckA]", "8"]}], "}"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "1"], "\[Rule]", 
      FractionBox["1", "999"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "2"], "\[Rule]", 
      FractionBox["84239", "337662"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "3"], "\[Rule]", 
      FractionBox["42", "169"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "4"], "\[Rule]", 
      FractionBox["1", "999"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "5"], "\[Rule]", 
      FractionBox["1", "999"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "6"], "\[Rule]", 
      FractionBox["84239", "337662"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "7"], "\[Rule]", 
      FractionBox["42", "169"]}], ",", 
     RowBox[{
      SubscriptBox["\[DoubleStruckA]", "8"], "\[Rule]", 
      FractionBox["1", "999"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8119825925853987`*^9, 3.8119826117894*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M8", " ", "=", " ", 
  RowBox[{"PrSAT", "[", "\[IndentingNewLine]", 
   RowBox[{
   "statisticalParity", "\[Union]", "equalPositivePredictiveValue", 
    "\[Union]", "equalNegativePredictiveValue", "\[Union]", 
    "unequalBaseRates", "\[Union]", "notPerfectPrediction"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.811982703288943*^9, 3.811982720080413*^9}}],

Cell[BoxData[
 TemplateBox[{
  "PrSAT","srchfail","\"Search phase failed; attempting FindInstance\"",2,38,
   23,29081243085678690139,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.811982728868726*^9}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.8119827289724474`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M9", " ", "=", " ", 
  RowBox[{"PrSAT", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "equalRatioOfTruePositiveRateToTrueNegativeRate", "\[Union]", 
     "equalRatioOfPredictedPositiveToActualPositive"}], ",", 
    RowBox[{
     RowBox[{"calibration2", "\[IndentingNewLine]", "Probabilities"}], " ", 
     "\[Rule]", " ", "Regular"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.8119828873924046`*^9, 3.8119829538020315`*^9}, {
  3.8119829896293983`*^9, 3.811982994535687*^9}, {3.8119830260744133`*^9, 
  3.8119830279811597`*^9}}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.8119829869203396`*^9, 3.811983022422102*^9, 
  3.811983296290893*^9}]
}, Open  ]],

Cell["\<\
Here PrSAT checks a restricted version of Kleinberg et al\[CloseCurlyQuote]s \
main result:\
\>", "Text",
 CellChangeTimes->{{3.769947809599628*^9, 3.7699478236959734`*^9}, {
  3.8119831527648697`*^9, 3.8119831719418354`*^9}, {3.8119834558867364`*^9, 
  3.8119834598309975`*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{" ", 
    RowBox[{
     RowBox[{
     "This", " ", "takes", " ", "too", " ", "long", " ", "to", " ", "solve", 
      " ", "on", " ", "my", " ", 
      RowBox[{"machine", ".", " ", "We"}], " ", "could", " ", "try", " ", 
      "to", " ", "speed", " ", "things", " ", "up", " ", "by", " ", "adding", 
      " ", 
      RowBox[{"constraints", ".", "\[IndentingNewLine]", "M10"}]}], " ", "=", 
     " ", 
     RowBox[{"PrSAT", "[", "\[IndentingNewLine]", 
      RowBox[{
      "negativeBalance4", " ", "\[Union]", " ", "positiveBalance4", " ", 
       "\[Union]", " ", "strongCalibration4"}]}]}], "}"}], 
   "\[IndentingNewLine]", "]"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7699453145479016`*^9, 3.7699453433784137`*^9}, {
   3.76994544692651*^9, 3.7699456212573214`*^9}, {3.769945725431675*^9, 
   3.7699457336526937`*^9}, {3.7699458382990713`*^9, 
   3.7699458419214272`*^9}, {3.7699469392597723`*^9, 3.769946946217168*^9}, {
   3.769947190431921*^9, 3.769947206022236*^9}, {3.7699474070809555`*^9, 
   3.7699474095862837`*^9}, {3.769947703385666*^9, 3.769947722119565*^9}, 
   3.769947802290216*^9, {3.769947868920998*^9, 3.769947938780269*^9}, {
   3.769948102012765*^9, 3.7699481137673254`*^9}, 3.7699606228162513`*^9, {
   3.7699637655497227`*^9, 3.769963815575979*^9}, {3.8119831617090173`*^9, 
   3.8119831641338606`*^9}, {3.8119831972210665`*^9, 3.8119832401496735`*^9}}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"Ditto", ".", "\[IndentingNewLine]", "M11"}], " ", "=", " ", 
   RowBox[{"PrSAT", "[", "\[IndentingNewLine]", 
    RowBox[{
    "negativeBalance4", " ", "\[Union]", " ", "positiveBalance4", "\[Union]", 
     " ", "strongCalibration4", " ", "\[Union]", " ", "notPerfectPrediction", 
     " ", "\[Union]", " ", "differentBaseRates"}], "\[IndentingNewLine]", 
    "]"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7699484720510283`*^9, 3.769948618033092*^9}, {
   3.769957500358104*^9, 3.7699575688834453`*^9}, 3.769960580195233*^9, {
   3.7699637295350647`*^9, 3.7699637298741627`*^9}, {3.7699638206863155`*^9, 
   3.7699638295745068`*^9}, {3.811983244397143*^9, 3.8119832776293716`*^9}, {
   3.8119833386076965`*^9, 3.811983343570077*^9}}],

Cell["\<\
And so on, and on. We can (with enough patience and computing power) come up \
with all sorts of examples and prove all sorts of impossibility results.\
\>", "Text",
 CellChangeTimes->{{3.8119833655999293`*^9, 3.8119834000231295`*^9}, {
  3.844022875591771*^9, 3.8440228756982727`*^9}}]
}, Open  ]]
},
WindowSize->{1280, 637},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
Magnification:>1.35 Inherited,
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (September 21, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 133, 1, 99, "Text"],
Cell[CellGroupData[{
Cell[716, 25, 103, 1, 93, "Section"],
Cell[822, 28, 50, 1, 42, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[909, 34, 199, 3, 93, "Section"],
Cell[1111, 39, 4565, 65, 197, "Text"],
Cell[CellGroupData[{
Cell[5701, 108, 219, 3, 65, "Subsection"],
Cell[5923, 113, 23687, 397, 592, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29647, 515, 210, 3, 65, "Subsection"],
Cell[29860, 520, 48832, 817, 895, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78729, 1342, 207, 3, 65, "Subsection"],
Cell[78939, 1347, 68543, 1161, 1023, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[147519, 2513, 518, 8, 65, "Subsection"],
Cell[148040, 2523, 70518, 1182, 1266, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[218595, 3710, 354, 5, 65, "Subsection"],
Cell[218952, 3717, 4372, 82, 855, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[223373, 3805, 286, 3, 93, "Section"],
Cell[CellGroupData[{
Cell[223684, 3812, 149, 2, 65, "Subsection"],
Cell[223836, 3816, 11510, 198, 1668, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[235383, 4019, 173, 2, 65, "Subsection"],
Cell[235559, 4023, 1149, 25, 225, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[236745, 4053, 137, 2, 65, "Subsection"],
Cell[236885, 4057, 633, 10, 119, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[237555, 4072, 180, 2, 65, "Subsection"],
Cell[237738, 4076, 270, 5, 40, "Text"],
Cell[CellGroupData[{
Cell[238033, 4085, 995, 26, 239, "Input"],
Cell[239031, 4113, 1226, 34, 42, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[240294, 4152, 1038, 30, 73, "Input"],
Cell[241335, 4184, 433, 7, 42, "Output"]
}, Open  ]],
Cell[241783, 4194, 239, 5, 40, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[242059, 4204, 305, 4, 65, "Subsection"],
Cell[242367, 4210, 2353, 39, 301, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[244769, 4255, 371, 5, 93, "Section"],
Cell[245143, 4262, 96, 1, 40, "Text"],
Cell[CellGroupData[{
Cell[245264, 4267, 199, 3, 65, "Subsection"],
Cell[CellGroupData[{
Cell[245488, 4274, 282, 8, 44, "Input"],
Cell[245773, 4284, 287, 8, 44, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[246109, 4298, 373, 5, 65, "Subsection"],
Cell[CellGroupData[{
Cell[246507, 4307, 637, 14, 44, "Input"],
Cell[247147, 4323, 361, 11, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[247545, 4339, 526, 15, 44, "Input"],
Cell[248074, 4356, 444, 14, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[248555, 4375, 474, 14, 44, "Input"],
Cell[249032, 4391, 387, 12, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249456, 4408, 468, 13, 44, "Input"],
Cell[249927, 4423, 389, 12, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250353, 4440, 587, 14, 44, "Input"],
Cell[250943, 4456, 433, 12, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[251413, 4473, 597, 16, 44, "Input"],
Cell[252013, 4491, 468, 15, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[252518, 4511, 464, 12, 44, "Input"],
Cell[252985, 4525, 388, 11, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[253410, 4541, 551, 16, 44, "Input"],
Cell[253964, 4559, 468, 15, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[254469, 4579, 229, 5, 42, "Input"],
Cell[254701, 4586, 707, 23, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[255445, 4614, 827, 25, 44, "Input"],
Cell[256275, 4641, 676, 22, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[256988, 4668, 969, 26, 44, "Input"],
Cell[257960, 4696, 1094, 35, 64, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[259091, 4736, 599, 16, 44, "Input"],
Cell[259693, 4754, 478, 15, 64, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[260208, 4774, 346, 9, 44, "Input"],
Cell[260557, 4785, 281, 8, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[260875, 4798, 1796, 51, 129, "Input"],
Cell[262674, 4851, 1668, 53, 77, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264379, 4909, 338, 8, 42, "Input"],
Cell[264720, 4919, 268, 7, 42, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[265037, 4932, 444, 5, 65, "Subsection"],
Cell[265484, 4939, 279, 6, 40, "Text"],
Cell[CellGroupData[{
Cell[265788, 4949, 428, 8, 42, "Input"],
Cell[266219, 4959, 176, 3, 42, "Output"]
}, Open  ]],
Cell[266410, 4965, 191, 4, 40, "Text"],
Cell[CellGroupData[{
Cell[266626, 4973, 1885, 49, 187, "Input"],
Cell[268514, 5024, 1462, 45, 73, "Output"]
}, Open  ]],
Cell[269991, 5072, 185, 4, 40, "Text"],
Cell[CellGroupData[{
Cell[270201, 5080, 1856, 51, 187, "Input"],
Cell[272060, 5133, 1536, 45, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273633, 5183, 2300, 64, 129, "Input"],
Cell[275936, 5249, 2359, 71, 116, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[278332, 5325, 2346, 69, 129, "Input"],
Cell[280681, 5396, 2734, 85, 168, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[283452, 5486, 1655, 48, 187, "Input"],
Cell[285110, 5536, 1311, 43, 73, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[286482, 5586, 418, 6, 79, "Section"],
Cell[286903, 5594, 213, 4, 40, "Text"],
Cell[CellGroupData[{
Cell[287141, 5602, 1196, 30, 42, "Input"],
Cell[288340, 5634, 698, 23, 42, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[289087, 5663, 309, 4, 93, "Section"],
Cell[289399, 5669, 228, 5, 40, "Text"],
Cell[CellGroupData[{
Cell[289652, 5678, 405, 8, 71, "Input"],
Cell[290060, 5688, 278, 6, 30, "Message"],
Cell[290341, 5696, 184, 3, 42, "Output"]
}, Open  ]],
Cell[290540, 5702, 462, 11, 68, "Text"],
Cell[CellGroupData[{
Cell[291027, 5717, 410, 9, 99, "Input"],
Cell[291440, 5728, 2471, 63, 96, "Output"]
}, Open  ]],
Cell[293926, 5794, 138, 1, 40, "Text"],
Cell[CellGroupData[{
Cell[294089, 5799, 130, 2, 42, "Input"],
Cell[294222, 5803, 1106, 31, 287, "Output"]
}, Open  ]],
Cell[295343, 5837, 315, 5, 67, "Text"],
Cell[CellGroupData[{
Cell[295683, 5846, 527, 11, 99, "Input"],
Cell[296213, 5859, 225, 5, 30, "Message"],
Cell[296441, 5866, 161, 3, 42, "Output"]
}, Open  ]],
Cell[296617, 5872, 241, 5, 40, "Text"],
Cell[CellGroupData[{
Cell[296883, 5881, 1048, 30, 243, "Input"],
Cell[297934, 5913, 2428, 63, 96, "Output"]
}, Open  ]],
Cell[300377, 5979, 200, 4, 40, "Text"],
Cell[CellGroupData[{
Cell[300602, 5987, 2057, 53, 271, "Input"],
Cell[302662, 6042, 2837, 68, 96, "Output"]
}, Open  ]],
Cell[305514, 6113, 279, 6, 40, "Text"],
Cell[CellGroupData[{
Cell[305818, 6123, 2551, 70, 301, "Input"],
Cell[308372, 6195, 4968, 119, 196, "Output"]
}, Open  ]],
Cell[313355, 6317, 193, 4, 40, "Text"],
Cell[CellGroupData[{
Cell[313573, 6325, 515, 11, 127, "Input"],
Cell[314091, 6338, 2475, 63, 96, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[316603, 6406, 408, 8, 127, "Input"],
Cell[317014, 6416, 226, 5, 30, "Message"],
Cell[317243, 6423, 89, 2, 42, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[317369, 6430, 588, 12, 127, "Input"],
Cell[317960, 6444, 126, 2, 42, "Output"]
}, Open  ]],
Cell[318101, 6449, 289, 6, 40, "Text"],
Cell[318393, 6457, 1437, 27, 127, "Input"],
Cell[319833, 6486, 799, 14, 127, "Input"],
Cell[320635, 6502, 296, 5, 67, "Text"]
}, Open  ]]
}
]
*)

